#!/usr/local/bin/perl
# symlink-resolve, 07-Feb-93 Noah Friedman <friedman@prep.ai.mit.edu>
#
# Usage: symlink-resolve [path1] {path2} {...}
#
# Resolve pathnames until there are no more symbolic links.  Resulting
# pathname be not be a file that actually exists (depending on whether
# symlinks point to nonexistent files).
#
# If environment variable SYMLINK_RESOLVE is set to "canonicalize", then
# pathnames are cleaned up of internal relative pathnames, i.e.
# canonicalization to absolute pathname is done.
#

if ($ENV{'SYMLINK_RESOLVE'} eq 'canonicalize')
  {
   chop ($pwd = `pwd`);
  }

next_path:
for ($i = 0; $i < @ARGV; $i++)
  {
   @p = split (/\//, "$ARGV[$i]");
   $link_count = 0;
   for ($j = 0; $j < @p; $j++)
     {
      $orig_component = $k = join ("/", @p[0 .. $j]);
      while ($l = readlink($k))
        {
         $k = $l;
         # Simple way of detecting symlink loops (it unfortunately causes
         # the system to give up when there are simply too many levels,
         # even if resolution would eventually occur).  This parameter is
         # adjustable, of course.  Most unix kernels allow a depth of 8.
         if ($link_count++ == 16)
           {
            print STDERR "symlink-resolve: $ARGV[$i]: " . 
                         "Too many levels of symbolic links\n";
            next next_path;
           }
        }
      if ($k eq $orig_component)
        {
         next;
        }
      if (substr ($k, 0, 1) eq "/")
        {
         # Absolute link.  Trash $p[0]-$p[$j+1] and replace with readlinked
         # path components.  Set $j to -1 so that next iteration of loop
         # will check array @p from start.
         splice (@p, 0, $j + 1, split (/\//, $k));
         $j = -1; 
        }
      else
        {
         # Insert partial (relative) path component into array in place of
         # current element $p[$j]
         splice (@p, $j, 1, split (/\//, $k));
         $j--;
        }
     }
   $_ = join ("/", @p);

   # If pathname should not be canonicalized, exit here. 
   if ($ENV{'SYMLINK_RESOLVE'} ne 'canonicalize')
     {
      print "$_\n";
      exit (0);
     }

   # Canonicalize pathname. 
   s/^\.$/$pwd/o;                     # Replace single "." with pwd.
   s/^([^\/])/$pwd\/\1/o;             # Prepend pwd if relative.
   s/\/\.\//\//og;                    # Remove any occurence of "/./".
   s/^.*\/\//\//og;                   # Get rid of "//" occurences.
   # Must do this in a loop to handle overlapping `/' character in
   # instances of "/../../"
   while (/\/[^\/][^\/]*\/\.\.\//o)  
     {
      s/\/[^\/][^\/]*\/\.\.\//\//og;  # Resolve most references to ".."
     }
   s/\/[^\/][^\/]*\/\.\.$//o;         # Resolving trailing ".."
   s/^\/..\//\//go;                   # Eliminate leading "/.."
   print "$_\n";   
  }

# eof
