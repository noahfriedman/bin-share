#!/usr/bin/env perl
# run-next --- run next instance of program in path after specified directory
# Author: Noah Friedman <friedman@splode.com>
# Created: 1995-09-07
# Public domain.

# Commentary:

# This script can be used by front-end wrapper scripts in a user's personal
# path to set environment variables, manipulate args, etc. before calling
# the real program which resides in a directory specified somewhere later
# in the user's path.  For example, a front end to a program could be
# written as:
#
#         #!/bin/sh
#         export LD_PRELOAD=...
#         exec run-next "$0" "$@"
#
# This script looks at the full path of the specified argument and will
# only search directories in PATH after that occurence.

# Code:

use strict;
use warnings qw(all);

use Getopt::Long;
use Pod::Usage;
use POSIX;

(my $progname = $0) =~ s=.*/==;

my %opt = ( print => 0,
            skip  => 1,
            debug => $ENV{RUN_NEXT_DEBUG},
          );

sub parse_options
{
  my $help = -1;
  local *ARGV = $_[0]; # modify our local arglist, not real ARGV.

  my $parser  = Getopt::Long::Parser->new;
  $parser->configure( qw(bundling autoabbrev require_order) );

  my $succ = $parser->getoptions
    ( 'h|help|usage+'  => \$help,
      'D|debug'        => \$opt{debug},
      'p|print'        => \$opt{print},
      's|skip=i'       => \$opt{skip},
    );

  pod2usage( -exitstatus => 1, -verbose => 0 )     unless $succ;
  pod2usage( -exitstatus => 0, -verbose => $help ) if $help >= 0;
}

sub err
{
  my $fatal = shift;
  my $msg = join( ": ", $progname, @_ );
  print STDERR $msg, (substr ($msg, -1, 1) eq "\n"? "" : "\n");
  exit ($fatal) if $fatal;
  return; # void
}

sub DEBUG
{
  return unless $opt{debug};
  return err( 0, @_ );
}

sub basename
{
  local $_ = shift;
  s=(?<!/)/+$==;
  s=.*/==;
  return $_;
}

sub dirname
{
  local $_ = shift;
  return undef unless m=/=;

  s=(?<!/)/+$==;
  s=/[^/]+$==;
  $_ = "/" if $_ eq "";
  return $_;
}

sub executable_file_p
{
  return 0 unless -f $_[0] && -x _ && -s _;
  my $accp = access( $_[0], X_OK );
  DEBUG("access( $_[0], X_OK ) == $accp");
  return $accp && 1;
}

sub main
{
  parse_options( \@_ );

  my $progarg = shift;
  my $progdir = dirname(  $progarg );
  my $prognam = basename( $progarg );
  my $found_progdir = defined( $progdir ) ? 0 : 1;

  DEBUG("progdir=$progdir, prognam=$prognam, found=$found_progdir\n\n");

  my %seen_progdir_name;
  my %seen_progdir_inode;
  my $counter = 0;
  my $execdir;
  for my $dir (split( /:/, $ENV{PATH} ))
    {
      DEBUG("counter=$counter, skip=$opt{skip}, found=$found_progdir, dir=$dir");

      if ($dir eq "")
        { $dir = "." }
      else
        { $dir =~ s=(?<!/)/+$== }

      $found_progdir = 1 if !$found_progdir && $dir eq $progdir;
      next unless $found_progdir;

      next if exists $seen_progdir_name{$dir};

      # If dir is a symlink to a previous dir in path (or vice-versa),
      # don't count that as a separate directory.
      my @st_dir = stat( $dir );
      my $dir_key = join( ':', $st_dir[0], $st_dir[1] );  # dev:ino
      next if exists $seen_progdir_inode{$dir_key};

      my $file = $dir eq "/" ? $dir . $prognam : join( "/", $dir, $prognam );
      my $efp = executable_file_p( $file );
      DEBUG("executable_file_p( $file ) == $efp\n\n");
      next unless $efp;

      $seen_progdir_name{$dir} = $seen_progdir_inode{$dir_key} = $counter++;

      DEBUG("counter=$counter, skip=$opt{skip}, found=$found_progdir");

      next unless $counter > $opt{skip};
      $execdir = $dir;
      last;
    }

  if (! $found_progdir)
    { err( 1, $progdir, "directory not in PATH" ) }
  elsif (! (defined( $progdir ) || %seen_progdir_name))
    { err( 1, $prognam, "program not in PATH" ) }
  elsif (defined( $progdir ) && !%seen_progdir_name)
    { err( 1, $prognam, "program not in any directories after \`$progdir' in PATH" ) }


  if ($counter <= $opt{skip})
    {
      err( 0, $prognam, sprintf( "only %d instances of program in path;"
                                 . " cannot skip more than %d:",
                                 $counter,
                                 $counter-1 ));

      map { err(0, "  " . join ("/", $_, $prognam))
          } sort { $seen_progdir_name{$a} <=> $seen_progdir_name{$b}
                 } keys %seen_progdir_name;
      return 0;
    }

  my $execprog = join( "/", $execdir, $prognam );
  if ($opt{print})
    {
      DEBUG("PRINT: $execprog\n\n");
      print $execprog, "\n";
      return 1;
    }
  DEBUG("EXEC: $execprog\n\n");
  exec( $execprog, @_ ) || err( 1, $execprog, "$!" );
}

exit( main( @ARGV ) == 0 );

__END__


=head1 NAME

run-next - run next program by name in path

=head1 SYNOPSIS

 Usage: run-next {options} [program {program options}]

 Options:
    -p, --print                  Just print full name of program to run,
                                 without running it.

    -s, --skip           N       Run Nth instance of program in path.
                                 This is relative to absolute pathname
                                 specified in program name to run, if any.
                                 Default is 1.
=cut
