#!/usr/bin/env python3
# pyrepl --- interactive python interpreter with easier to read output

# Author: Noah Friedman <friedman@splode.com>
# Created: 2018-09-05
# Public domain

# Commentary:
# Code:

repl_locals = locals().copy()

import readline
import rlcompleter
import code
import subprocess

import atexit
import os
import platform
import sys

import signal
import termios

import nfpprint



# Provide saved history and tab completion on python symbols
# Shamelessly stolen from Python library manual
class Repl( code.InteractiveConsole ):
    def __init__( self, locals=None, filename="<repl>", history_file=None, history_size_max=1024 ):
        super( __class__, self ).__init__( locals=locals, filename=filename )

        readline.parse_and_bind( 'tab: complete' )
        if history_file is None:
            histdir = os.getenv( 'XDG_CACHE_HOME' ) or os.getenv( 'HOME' )
            self.history_file = os.path.join( histdir, ".pyrepl_history" )
        else:
            self.history_file = history_file
        self.history_size_max = history_size_max
        self.history_import()
        atexit.register( self.history_export )


    def history_import( self ):
        if self.history_file:
            try:
                readline.read_history_file( self.history_file )
            except IOError:           # python2
                pass
            except FileNotFoundError: # python3, undef in python2
                pass


    def history_export( self ):
        if self.history_file:
            readline.set_history_length( self.history_size_max )
            readline.write_history_file( self.history_file )


class PrettyPrinter( nfpprint.PrettyPrinter ):
    def __init__( self, *args, **kwargs ):
        super().__init__( *args, **kwargs )
        # adjust width when terminal size changes
        self.settings.setdefault( 'auto_width', True )
        self._orig_SIGWINCH = signal.signal( signal.SIGWINCH,
                                             self._handle_SIGWINCH )
        self._update_max_width()


    def _handle_SIGWINCH( self, signum, frame ):
        if self.settings.debug:
            signame = signal.Signals( signum ).name
            owidth  = self.settings.max_width
            self._update_max_width()
            nwidth  = self.settings.max_width
            self._debugmsg( '[{}] {} => {}', signame, owidth, nwidth )
        else:
            self._update_max_width()


    def _update_max_width( self, fd=sys.stdout ):
        if self.settings.auto_width:
            try:
                (row, col) = termios.tcgetwinsize( fd )
                if col > 15:
                    self.settings.max_width = col - 2
            except termios.error:
                pass

    def __del__( self ):
        signal.signal( signal.SIGWINCH, self._orig_SIGWINCH )
        self._debugmsg( '{}.__del__({:#x})', self._class_name( self ), id( self ) )
        parent = super( __class__, self )
        if hasattr( parent, '__del__' ):
            parent.__del__()


repl_pp = None
def pp( *args, **kwargs ):
    for arg in args:
        repl_pp.pprint( arg, **kwargs )


def bt( *cmd ):
    output = subprocess.check_output( cmd ).decode( sys.stdout.encoding )
    return output.rstrip( ' \t\r\n' )


def load( filename ):
    with open( filename, 'r' ) as f:
        text = f.read()
    text.replace( '\r\n', '\n' )
    exec( text, repl_locals )


def pyrepl( argv=sys.argv ):
    global repl_pp
    repl_pp = PrettyPrinter( indent=2, width=76 )

    banner = '{} {}.{}.{} [{}] {}-{}'.format(
        platform.python_implementation(),
        sys.version_info.major,
        sys.version_info.minor,
        sys.version_info.micro,
        platform.python_build()[1],
        sys.platform,
        platform.machine(), )

    # Keep the initial namespace of the repl fairly clean,
    # except for some convenience functions.
    # (having access to repl_pp lets us change _width on occasion.
    # Set the current namespace to __pyrepl__ so loading random
    # scripts doesn't fire off their "if __main__" blocks.
    repl_locals.update( { '__name__' : '__pyrepl__',
                          'bt'       : bt,
                          'load'     : load,
                          'pp'       : pp,
                          'repl_pp'  : repl_pp,
                        } )

    for elt in sys.argv[1:]:
        load( elt )

    # Don't display 'None' if there is nothing to display.
    sys.displayhook = lambda arg: (arg is None) or pp( arg )
    repl = Repl( locals=repl_locals )
    repl.interact( banner=banner, exitmsg='' )


if __name__ == '__main__':
    pyrepl()

# pyrepl ends here
