#!/bin/bash
# cpdir, 14-Aug-91 Noah Friedman <friedman@prep.ai.mit.edu>
# Last modified 10-Feb-93
#
#    Copies directory tree preserving time, ownership, and other attributes
# of files.  Does not dereference symbolic links. 
#
# Requires bash version 1.12 or later to work properly. 
# 
# Public domain.
#

function usage ()
{
    if [ $# -gt 0 ]; then
       echo -e "${progname}: $*\n" 1>&2
    fi

    cat 1>&2 <<EOF
Usage: ${progname} {-D|--debug} {-v|--verbose} [src1] {src2} {...} [dstdir]

   e.g. "${progname} /home/fsf/friedman /home/gp"
         => /home/fsf/friedman --> /home/gp/friedman

EOF
    exit 1
}

function main ()
{
    initialize_variables "$@"
    parse_command_args "$@"
    shift $?

    test -n "${debug+set}" && set -x

    srcs="$*"
    shift $[ $# - 1 ];
    dst="$1"

    for src in ${srcs%${dst}} ; do
       do_cpdir "${src}" "${dst}"
    done

    exit 0
}

function initialize_variables ()
{
    progname="${0##*/}"
    bq="\`"  # To prevent hairy quoting and escaping later.
    eq="'"
}

function parse_command_args ()
{
 local orig_number_options=$#

    # unset option variables to make sure they weren't accidentally
    # exported 
    unset verbose debug

    # If you add new commands be sure to change the wildcards below to make
    # sure they are unambiguous (i.e. only match one possible long option)
    # Be sure to show at least one instance of the full long option name to
    # document what the long option is canonically called. 
    while [ $# -gt 0 ]; do
       case z$1 in
          z-D | z--debug | z--d* )
             debug="t"
             shift
            ;;
          z-v | z--verbose | z--v* )
             verbose="-v"
             shift
            ;;
          z-h* | z--help | z--h* )
             usage
            ;;
          z-- )
             shift
             break
            ;;
          z-* )
             usage "${bq}${1}${eq} is not a valid option."
            ;;
          * )
             break
            ;;
       esac
    done

    # Return number of shifted arguments so calling function can shift
    # appropriate amount.
    return $[ orig_number_options - $# ]
}

function do_cpdir ()
{
 local src="$1"
 local dst="$2"
 local src_dir

    src_dir=$(dirname "${src}")
    if [ "z${src_dir}" = "z${src}" ]; then
       src_dir="."
    fi
    src=$(basename "${src}")

    (chdir "${src_dir}" && tar -cf - "./${src}") \
       | (chdir "${dst}" && tar ${verbose} -xpf - ) ;
}

function chdir ()
{
    if cd "${1}" 2> /dev/null ; then
       return 0
    fi

    reason=$(cd "${1}" 2>&1)
    reason="${reason#*:}"
    echo "${progname}: Could not chdir to ${bq}${1}${eq}:${reason}" 1>&2
    return 1
}

# Some systems don't seem have a basename(1).
function basename ()
{
 local path="$1"
 local suffix="$2"
 local tpath="${path%/}"

    # Strip trailing '/' characters from path (unusual that this should
    # ever occur, but basename(1) seems to deal with it.)
    while [ "${tpath}" != "${path}" ]; do
       tpath="${path}"
       path="${tpath%/}"
    done

    path="${path##*/}"       # Strip off pathname
    echo ${path%${suffix}}   # Also strip off extension, if any.
}

# Sigh.  Even more systems don't seem to have a dirname(1).
function dirname ()
{
 local dir="$1"
 local tdir="${dir%/}"

    # Strip trailing '/' characters from dir (unusual that this should
    # ever occur, but dirname(1) seems to deal with it.)
    while [ "${tdir}" != "${dir}" ]; do
       tdir="${dir}"
       dir="${tdir%/}"
    done

    dir="${dir%/*}"
    echo "${dir:-/}"
}

main "$@"

#
# eof
#
