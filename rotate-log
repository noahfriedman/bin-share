#!/bin/bash
# 10-Feb-92 Noah Friedman <friedman@prep.ai.mit.edu>
# Last modified 18-Oct-92
# 
# Rotate accounting logs, optionally compressing old logs. 
# See usage and help functions for more details. 
# This script requires bash 1.12 or later to function properly. 
#
# Public domain.
#

function usage ()
{
    if [ $# -gt 0 -a "z$1" != "z--help" ]; then
       echo -e "${progname}: $*\n" 1>&2
    fi

    cat 1>&2 << EOF
Usage: ${progname} {-c} {-D} {-d dir} {-g group} {-h} {-m mode} {-n num}
       {-o owner} {-v} {--chgrp=group} {--chmod=mode} {--chown=owner} 
       {--help} {--compress} {--debug} {--default-directory=dir} 
       {--number-of-logs=num} {--verbose} [log1] {log2} ...

EOF

    if [ "z$1" != "z--help" ]; then
       cat 1>&2 << EOF
   Use option ${bq}--help${eq} to get a longer description of options.

EOF
       exit 1
    fi
}

function help () 
{
    usage --help

    cat 1>&2 <<EOF
-c, --compress               Compress logs while rotating.
-D, --debug                  Turn on shell debugging ("set -x").
-d, --default-directory DIR  Default directory for log files listed without
                             pathnames of any sort (i.e. no "/" chars in name)
-g, --chgrp GROUP            Change group ownership to GROUP on rotated logs.
-h, --help                   This documentation.
-m, --chmod MODE             Change access permissions to MODE on rotated logs.
-n, --number-of-logs N       Keep up to N old versions of log.  Default is ${default_number_of_logs}.
                             Rotated logs are numbered with a zero-origin.
-o, --chown OWNER            Change owner of logs to OWNER (can use
                             OWNER.GROUP and avoid using --chgrp if
                             ${bq}chown${eq} command supports this syntax).
-v, --verbose                Chatter away while working.

EOF

    exit 1
}

function main ()
{
    initialize_variables "$@"
    parse_command_args "$@"
    shift $?

    test -n "${debug+set}" && set -x

    if [ $# -eq 0 ]; then
       usage "At least one log name is required as an argument."
    fi

    for log in "$@" ; do
       if [ "${compress}" ]; then
          compress_log "${log}"
       fi
       rotate_log "${log}"
    done
}

function initialize_variables ()
{
    progname="${0##*/}"
    bq="\`"  # To prevent hairy quoting and escaping later.
    eq="'"
    dq='"'

    default_number_of_logs=7
}

function parse_command_args ()
{
 local orig_number_options=$#

    # unset option variables to make sure they weren't accidentally
    # exported 
    unset chgrp chmod chown compress debug default_directory number_of_logs verbose 

    # If you add new options be sure to change the wildcards below to make
    # sure they are unambiguous (i.e. only match one possible long option)
    # Be sure to show at least one instance of the full long option name to
    # document what the long option is canonically called. 
    # Long options which take arguments will need a `*' appended to the
    # canonical name to match the value appended after the `=' character. 
    while [ $# -gt 0 ]; do
       case z$1 in
          z-c | z--compress | z--co* )
             compress=t
             shift
            ;;
          z-D | z--debug | z--deb* )
             debug=t
             shift
            ;;
          z-d | z--default-directory* | z--def* )
             get_option_argument default_directory "$1" "$2"
             shift $?
            ;;
          z-g | z--chgrp* | z--chg* )
             get_option_argument chgrp "$1" "$2"
             shift $?
            ;;
          z-h* | z--help | z--h* )
             help
            ;;
          z-m | z--chmod* | z--chm* )
             get_option_argument chmod "$1" "$2"
             shift $?
            ;;
          z-n | z--number-of-logs* | z--n* )
             get_option_argument number_of_logs "$1" "$2"
             shift $?
            ;;
          z-o | z--chown* | z--cho* )
             get_option_argument chown "$1" "$2"
             shift $?
            ;;
          z-v | z--verbose | z--v* )
             verbose=t
             shift
            ;;
          z-- )
             shift
             break
            ;;
          z-* )
             usage "${bq}${1}${eq} is not a valid option."
            ;;
          * )
             break
            ;;
       esac
    done

    if [ ! "${number_of_logs}" ]; then
       number_of_logs="${default_number_of_logs}"
    fi

    # Return number of shifted arguments so calling function can shift
    # appropriate amount.
    return $[ orig_number_options - $# ]
}

# Usage: get_option_argument VARIABLE OPTION ARG {OPTIONAL}
#    where VARIABLE is shell variable that will be set to the value ARG.
#    Long option syntax is `--foo=bar' or `--foo bar'.  3rd argument ARG
#    won't get used if first long option syntax was used.  If 4 arg
#    OPTIONAL is non-empty, option isn't required to have an argument; if
#    the argument is missing, VARIABLE is set to the empty value. 
# Returns number of positions caller should shift
function get_option_argument ()
{
 local variable="$1"
 local option="$2"
 local arg="$3"
 local arg_optional="$4"

    # All long options must be at least 3 characters long (--o*), whereas
    # short options are only two chars (-o) and arguments are always
    # separate.
    if [ ${#option} -ge 3 -a "z${option#*=}" != "z${option}" ]; then
       arg="${option#*=}"  # Strip off anything before and including `=' char
       eval ${variable}=\'"${arg}"\'
       return 1
    else
       if [ -z "${arg}" -a -z "${arg_optional}" ]; then
          usage "option ${bq}${option}${eq} requires argument."
       fi
       eval ${variable}=\'"${arg}"\'
       return 2
    fi
}

function pushd ()
{
    if builtin pushd "${1}" > /dev/null 2>&1 ; then
       return 0
    fi

    reason="$(builtin pushd ${1} 2>&1 1> /dev/null)"
    reason="${reason#*:}"
    perror "Could not chdir to ${bq}${1}${eq}:${reason}"
    return 1
}

function compress_log ()
{
 local directory="${1%/*}"
 local logfile="${1##*/}"
 local file
 local num=$[ number_of_logs - 1 ];

    if [ "${directory}" = "${logfile}" ]; then
       directory=${default_directory:-${PWD}}
    fi

    if ! pushd "${directory}" ; then
       perror "log compression failed."
       return 1
    fi

    report "Compressing uncompressed logs in ${PWD}:"
    while [ ${num} -ge 0 ]; do
       file="${logfile}.${num}"
       if [ -f "${file}" ]; then
          compress -f "${file}" && report "${file} -> ${file}.Z"
       fi
       num=$[ num - 1 ]
    done
    # Don't do this.  Things like accounting, syslogd, and so on, might
    # still have a file descriptor open on this file, and all they'd do is
    # corrupt the compressed file.  It'll get compressed the next time log
    # rotation happens, and by then it won't be in use by anything anymore,
    # probably. 
    #compress -f "${logfile}" && report "${logfile} -> ${logfile}.Z"
    report "Finished compressing ${dq}${logfile}${dq} logs."

    popd > /dev/null 2>&1
}


function rotate_log ()
{
 local directory="${1%/*}"
 local logfile="${1##*/}"
 local file
 local num=$[ number_of_logs - 1 ]
 local dot_Z_if_compressed=""

    if [ "${directory}" = "${logfile}" ]; then
       directory=${default_directory:-${PWD}}
    fi

    if ! pushd "${directory}" ; then
       perror "log rotation failed."
       return 1
    fi

    if [ "${compress}" ]; then
       dot_Z_if_compressed=".Z"
    fi

    report "Rotating logs in directory ${PWD}:"

    while [ ${num} -ge 0 ]; do
       nextnum=$[ num + 1 ]
       oldfile="${logfile}.${num}${dot_Z_if_compressed}"
       newfile="${logfile}.${nextnum}${dot_Z_if_compressed}"
       if [ -f "${oldfile}" -a ${nextnum} -lt ${number_of_logs} ]; then
          mv "${oldfile}" "${newfile}" && report "${oldfile} -> ${newfile}"
          chperms "${newfile}"
       fi
       num=$[ num - 1 ]
    done

    # Lastly, move current log to log.0
    # Note that logfile will never be compressed (even if --compress option
    # was specified).  See comments in compress_log for reason why. 
    oldfile="${logfile}"
    newfile="${logfile}.0"
    if [ -f "${logfile}" ]; then
       mv "${oldfile}" "${newfile}" && report "${oldfile} -> ${newfile}"
       chperms "${newfile}"
    fi
    
    cp /dev/null "${logfile}"
    chperms "${logfile}"
    report "Created ${logfile}"

    report "Finished rotating ${dq}${logfile}${dq} logs."
    popd > /dev/null 2>&1
}

function chperms () 
{
    test "${chown}" && chown ${chown} "$@"
    test "${chgrp}" && chgrp ${chgrp} "$@"
    test "${chmod}" && chmod ${chmod} "$@"
}

# Print message on stdout (if we desire verbosity)
function report ()
{
    if [ "${verbose}" ]; then
       echo "$*" 
    fi
}

# Print message on stderr (always)
function perror ()
{
    echo "${progname}: $*" 1>&2
}

main "$@"

# eof
