#!/bin/sh
# $Id: sdig,v 1.3 2015/10/26 19:50:41 friedman Exp $

# DNS servers are starting to deprecate 'any' responses.  So we have to try
# every known record type explicitly in those cases.
#
# Pseudo types:
#
# 'all' will perform an ANY query against an authoritative nameserver.
# 'any' will use whatever default servers are in resolv.conf.
#
# 'mall' and 'many' will explicitly ask for every known record type, using
# nameservers as 'all' and 'any' do, respectively.
#
# 'fall' and 'fany' are like 'mall' and 'many', but will search for all
# types even if a cname record is found.  A host with a cname record
# shouldn't have any others, but misconfigured domains might do so anyway.

alltypes='
    soa a aaaa mx ns ptr srv txt hinfo cname
    cdnskey cds dlv dnskey ds nsec nsec3 nsec3param rrsig ta
    caa cert ipseckey key kx openpgpkey sig sshfp tkey tlsa tsig
    dhcid dname hip rp afsdb apl uri loc
    avc csync dlv dname eui48 eui64 keydata l32 l64 lp nid ninfo rkey smimea talink
    a6 gpos isdn maila mailb mb md mf mg minfo mr naptr
    nsap nsap-ptr null nxt px rt sink spf unspec wks x25
'
# Unrecognized by dig: 	atma eid gid nb nbstat nimloc uid uinfo

idig()
{
    dig +nocmd +noall +nocl +nottlid +answer +keepopen -f - "$@"
}

ns()
{
    # If the address is a cname, we won't get any ns or soa info.
    echo "$1" ns | idig |
        { while read key ctype ans; do
              #echo NS: key=$key ctype=$ctype ans=$ans 1>&2
              case $ctype in
                  NS    ) echo $ans; return 0  ;;
                  CNAME ) ns   $ans; return $? ;;
              esac
          done
          return 1
        } && return $?

    echo "$1" soa +authority | idig |
        while read key ctype ans; do
            #echo SOA: key=$key ctype=$ctype ans=$ans 1>&2
            case $ctype in
                SOA ) ns $key; return 0 ;;
            esac
        done
}

# An 'any' query will only return what's already cached (if anything is),
# so to make sure we actually get all records, find an authoritative
# nameserver for that domain and query it.
adig()
{
    ns=`ns "$1"`
    case $ns in
        '' ) echo "$@" any ;;
        *  ) echo @$ns -t any "$@" +norecurse ;;
    esac
}

ip()
{
    expr "$1" : '^[0-9.][0-9.]*$' ||
    expr "$1" : '^[:0-9a-f][:0-9a-f]*$'
}

main()
{
    while [ $# -gt 0 ]; do
        server=
        case $1 in @* ) server=$1 ; shift ;; esac

        addr=$1; shift

        if ip "$addr" > /dev/null ; then
            options=
            while [ $# -gt 0 ]; do
                case $1 in
                    +* ) options="$options $1"; shift ;;
                    *  ) break ;;
                esac
            done
            echo $server -x "$addr" $options
        elif [ $# -eq 0 ]; then
            echo $server "$addr" any
        else
            options= types=
            while [ $# -gt 0 ]; do
                case $1 in
                    *.* | @* ) break ;;
                    +*  ) options="$options $1"; shift ;;
                    *   )   types="$types   $1"; shift ;;
                esac
            done

            case $types in '' ) types=any ;; esac
            for type in $types; do
                case $type in
                    all ) adig "$addr" $options ;;

                    mall | many )
                        cname=`echo "$addr" cname | idig`
                        if [ ".$cname" != "." ]; then
                            # Our probe didn't honor cmdline options,
                            # so re-query with options.
                            echo "$addr" cname $options
                            continue # don't look for anything else.
                        fi

                        case $type:$server in
                            mall: ) server=@`ns "$addr"` ;;
                        esac
                        for t in $alltypes; do
                            echo $server "$addr" $t $options
                        done ;;

                    fall | fany ) # force lookup, even for cnames
                        case $type:$server in
                            fall: ) server=@`ns "$addr"` ;;
                        esac
                        for t in $alltypes; do
                            echo $server "$addr" $t $options
                        done ;;

                    * ) echo $server "$addr" $type $options ;;
                esac
            done
        fi
    done | idig
}

main "$@"

# eof
