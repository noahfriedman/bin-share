#! /usr/local/bin/perl
# tcpconnect --- connect via TCP to a specified host and port
# Author: Noah Friedman <friedman@prep.ai.mit.edu>
# Created: 1995-04-15
# Public domain

# $Id$

# Commentary:

# One way in which this might be improved is to look up all alternate
# addresses for a host and try each one if previous ones fail.

# Code:

$0 =~ s/.*\///;

&tcpconnect(@ARGV);

# Args: host, port
sub tcpconnect
{
  local ($rhost, $port) = @_;
  local ($proto, $name, $aliases, $type, $len, $thisaddr, $rhostaddr);
  local ($in, $out);
  # This is made global so that do_shutdown can use it.
  #local ($child);

  local ($sockaddr) = "S n a4 x8";

  # So we don't have to include socket.ph
  # These are probably correct, but not guaranteed to be.
  local ($AF_INET) = 2;
  local ($SOCK_STREAM) = 1;

  local ($hostname) = `hostname`;
  chop $hostname;

  ($name, $aliases, $proto) = getprotobyname ("tcp");

  if ($port !~ /^\d+$/)
    {
      ($name, $aliases, $port) = getservbyname ($port, "tcp");
    }

  ($name, $aliases, $type, $len, $thisaddr) = gethostbyname ($hostname);

  if ($rhost =~ /^[0-9.][0-9.]*$/)
    {
      local (@octet) = split (/[.]/, $rhost);
      $rhostaddr = pack ('C4', @octet);
    }
  else
    {
      ($name, $aliases, $type, $len, $rhostaddr) = gethostbyname ($rhost);
      if ($name eq "")
        {
          print (STDERR "$0: cannot resolve $rhost\n");
          exit (1);
        }
    }

  $thishost = pack ($sockaddr, $AF_INET, 0, $thisaddr);
  $rhost    = pack ($sockaddr, $AF_INET, $port, $rhostaddr);

  # Make socket filehandle.
  socket (S, $AF_INET, $SOCK_STREAM, $proto) || die ("$0: socket: $!");

  # Give the socket an address.
  bind (S, $thishost) || die ("$0: bind: $!");

  # Connect to server.
  connect (S, $rhost) || die ("$0: connect: $!");

  # Avoid deadlock by forking.
  $child = fork ();

  # Set file handles to be command buffered.
  # Since we do unbuffered sysreads and syswrites this may actually be
  # unnecessary.
  select (S); $| = 1; select (STDOUT); $| = 1;

  if ($child == 0)
    {
      $SIG{'HUP'} = 'shutdown_child';
      ($in, $out) = (STDIN, S);
    }
  else
    {
      $SIG{'HUP'} = 'shutdown_parent';
      ($in, $out) = (S, STDIN);
    }

  while ($len = sysread ($in, $_, 16384))
    {
      syswrite ($out, $_, $len);
    }

  local ($fn) = $SIG{'HUP'};
  &$fn;
}

# Called by child
sub shutdown_child
{
  local ($ppid) = getppid ();

  # 2 == shut down both send and receive.
  shutdown (S, 2);
  close (S);

  if ($ppid != 1)
    {
      kill 1, $ppid;
    }

  exit (0);
}

# Called by parent
sub shutdown_parent
{
  # 2 == shut down both send and receive.
  shutdown (S, 2);
  close (S);
  kill 1, $child;
  exit (0);
}

# tcpconnect ends here.
