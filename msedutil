#!/bin/sh

cmd_arg=
dev_arg=
pba_arg=

: ${SEDUTIL:=sedutil-cli}

######
##
######

askpass()
{
    case $# in 0 ) set "Password" ;; esac

    stty_g=`stty -g`
    trap 'stty "$stty_g"' 0 1 2 3 15
    stty -echo
    echo -n "$*:" 1>&2
    read pass
    echo 1>&2
    stty "$stty_g"
    trap '' 0 1 2 3 15
    echo "$pass"
}

askpass_new()
{
    while :; do
        pass1=`askpass "New ${1-Password}"`
        pass2=`askpass "New ${1-Password} (confirm)"`
        case $pass1 in $pass2 ) break ;; esac

        echo "Input passwords do not match; please enter again" 1>&2
        echo 1>&2
    done
    echo "$pass2"
}

getpass_adm() { adm_pass=`askpass "Admin1 Password"`; }
getpass_sid() { sid_pass=`askpass "SID Password"`; }
getpass_new() { new_pass=`askpass_new`; }

######
##
######

sedutil() { $SEDUTIL "$@"; }

sedutil_query()
{
    sedutil-cli --query "${1-$dev_arg}" |
        perl -ne '
            unless (/=/) {
                /^(\S{4})\S*\s+(?:[\d.]+\s+)?(\S{4})/i
                and $prefix = ucfirst( $1 ) . ucfirst( $2 );
                next;
            }
            s/[\0\r]+//g;
            s/^\s+//;
            s/\s+$/\n/;
            s/(=\s*N)\.(\s)/$1,$2/; # bug
            s/\s*=\s*/=/g;
            if (/,/) {
                s/,\s*/\n/g;
                s/[ \t]+/_/g;
            } else {
                s/\s+/\n/g;
            }
            s/^/$prefix:/mg;
            print $_;'
}

query_match() { sedutil_query | egrep -i "$@"; }

######
##
######

opal_setup()
{
    if [ -n "$pba_arg" ]; then
        if [ -f "$pba_arg" ]; then
            :
        elif [ -f "$pba_arg.gz" ]; then
            gunzip "$pba_arg.gz"
        else
            usage "$pba_arg missing" 1>&2
        fi
    fi

    sedutil --initialsetup debug "$dev_arg"
    # Expected output (not counting timestamps and device):
    # - 14:06:39.709 INFO: takeOwnership complete
    # - 14:06:41.703 INFO: Locking SP Activate Complete
    # - 14:06:42.317 INFO: LockingRange0 disabled
    # - 14:06:42.694 INFO: LockingRange0 set to RW
    # - 14:06:43.171 INFO: MBRDone set on
    # - 14:06:43.515 INFO: MBRDone set on
    # - 14:06:43.904 INFO: MBREnable set on
    # - 14:06:43.904 INFO: Initial setup of TPer complete on /dev/sda

    sedutil --enablelockingrange 0 debug "$dev_arg"
    # - 14:07:24.914 INFO: LockingRange0 enabled ReadLocking,WriteLocking

    sedutil --setlockingrange 0 LK debug "$dev_arg"
    # - 14:07:46.728 INFO: LockingRange0 set to LK

    if [ -n "$pba_arg" ]; then
        sedutil --setmbrdone off debug "$dev_arg"
        # - 14:08:21.999 INFO: MBRDone set off

        sedutil --loadpbaimage debug "$pba_arg" "$dev_arg"
        # - 14:10:55.328 INFO: Writing PBA to /dev/sda
        # 33554432 of 33554432 100% blk=1500
        # - 14:14:04.499 INFO: PBA image  /usr/sedutil/UEFI64.img written to /dev/sda
    fi

    # The SID and Admin1 passwords do not have to match but it makes things easier.
    # The SID password is used for initializing and unconfiguring OPAL entirely
    # The Admin1 password is used for everyday operations.
    sedutil --setSIDPassword debug "$sid_pass" "$dev_arg"
    sedutil --setAdmin1Pwd   debug "$adm_pass" "$dev_arg"

    # Your drive is now using OPAL locking.
    # You now need to COMPLETELY POWER DOWN YOUR SYSTEM
    # This will lock the drive so that when you restart your system it will
    # boot the PBA (preboot authentication).
}

opal_revert()
{
    opal_disable

    sedutil --revertNoErase "$adm_pass" "$dev_arg"
    # Revert LockingSP complete

    if query_match LockingEnabled=N; then
        sedutil --revertTPer "$sid_pass" "$dev_arg"
        # revertTper completed successfully
    else
        fatal "NOT executing --revertTPer as it might erase drive."
    fi
}

opal_enable()
{
    sedutil --enableLockingRange 0 "$adm_pass" "$dev_arg"
    # - 14:07:24.914 INFO: LockingRange0 enabled ReadLocking,WriteLocking

    sedutil --setMBREnable      on "$adm_pass" "$dev_arg"
    # - 14:08:21.999 INFO: MBREnable set on
}

# If you want to disable Locking and the PBA:
opal_disable()
{
    sedutil --disableLockingRange 0   "$adm_pass" "$dev_arg"
    # - 14:07:24.914 INFO: LockingRange0 disabled
    sedutil --setMBREnable        off "$adm_pass" "$dev_arg"
    # - 14:08:21.999 INFO: MBREnable set off
}

opal_lock()
{
    sedutil --setlockingrange 0 LK "$adm_pass" "$dev_arg"
}

opal_unlock()
{
    sedutil --setlockingrange 0 RW "$adm_pass" "$dev_arg"
}

opal_query()
{
    sedutil_query
}

opal_status()
{
    sedutil_query | sed -ne '/LockFunc:/!d' -e 's///p'
}

opal_setpass_adm()
{
    sedutil --setAdmin1Pwd   "$adm_pass" "$new_pass" "$dev_arg"
}

opal_setpass_sid()
{
    sedutil --setSIDPassword "$sid_pass" "$new_pass" "$dev_arg"
}

opal_msid()
{
    sedutil --printDefaultPassword "$dev_arg" | sed -e 's/^MSID: *//'
}

######
##
######

fatal()
{
    echo "${0##*/}:" "$@" 1>&2
    exit 1
}

usage()
{
    exec 1>&2
    case $# in
        0 ) : ;;
        * ) echo "${0##*/}: $@"; echo ;;
    esac
    echo "Usage: ${0##*/} setup   /dev/sdX  [/path/to/pba.img{.gz}]"
    echo "       ${0##*/} revert  /dev/sdX"
    echo "       ${0##*/} [enable | disable]  /dev/sdX"
    echo "       ${0##*/} [lock   | unlock]   /dev/sdX"
    echo "       ${0##*/} [query  | status]   /dev/sdX"
    echo "       ${0##*/} setpass [adm | sid] /dev/sdX"
    echo "       ${0##*/} msid /dev/sdX"
    exit 1
}

main()
{
    case ${UID-`id -u`} in
        0 ) : ;;
        * ) exec sudo "$@" ;;
    esac

    case `uname -s` in
        Linux )
            param=/sys/module/libata/parameters/allow_tpm
            errmsg="libata.allow_tpm is not enabled; cannot continue."
            if [ -f $param ]; then
                read allow_tpm < $param
                case $allow_tpm in
                    '' | 0 ) fatal "$errmsg" ;;
                esac
            else
                fatal "$errmsg";
            fi ;;
    esac

    case $1:$# in
        setpass:3 | passwd:3 ) : ;;
        setpass:* | passwd:* ) usage ;;

        setup:3 ) : ;;
        *:2     ) : ;;
        *:*     ) usage ;;
    esac

    case $1 in
        query | status | msid )
            cmd_arg=$1 ; shift
            dev_arg=$1 ; shift
            ;;

        lock | unlock | enable | disable )
            cmd_arg=$1 ; shift
            dev_arg=$1 ; shift
            getpass_adm
            ;;

        setup | revert )
            cmd_arg=$1 ; shift
            dev_arg=$1 ; shift
            if [ -n "$1" ]; then
                pba_arg=$1
                shift
            fi
            getpass_sid
            getpass_adm
            ;;

        setpass | passwd )
            shift
            case $1 in
                adm | admin1 )
                    cmd_arg=setpass_adm ; shift
                    getpass_adm
                    ;;

                sid )
                    cmd_arg=setpass_sid ; shift
                    getpass_sid
                    ;;

                * ) usage "password type must be 'sid' or 'admin1'" ;;
            esac
            dev_arg=$1 ; shift
            getpass_new
            ;;

        * ) usage "$1: Unknown command" ;;
    esac

    set -e
    opal_$cmd_arg "$@"
}

main "$@"

# eof
