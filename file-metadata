#!/usr/bin/env python3
# file-metadata -- collect file metadata
# Author: Noah Friedman <friedman@splode.com>
# Created: 2010-03-22
# Public domain

# Commentary:

# Many SCMs (e.g. mercurial and git) don't preserve file modes, timestamps,
# security contexts, and other errata when updating a workspace.  This
# command can be used to generate a checkpoint of this data in a workspace,
# and then restore it after doing an update.

# Code:

import argparse
import fnmatch
import grp
import json
import os
import pwd
import re
import sys

from base64       import b64encode, b64decode
from stat         import filemode, S_ISDIR, S_ISLNK, S_ISREG
from time         import strftime, gmtime

from nfpprint     import attrs, pformat
from nfscalesize  import scale_size
from rowfmt       import mkrowfmt

err_total = 0
option    = None


def debugpp( *objs ):
    for obj in objs:
        print( pformat( obj ), file=sys.stderr )


def errmsg( *args, level=0, **kwargs ):
    _exc = False
    for arg in args:
        if isinstance( arg, Exception ):
            _exc = arg
            global err_total
            err_total = min( 127, err_total + 1 )
            break

    if not ( option.verbose or level > 0 ):
        return

    prog = sys.argv[0].split( '/' )[-1]
    level = 'error' if level > 1 else 'warning'
    err_args = [prog, level]
    if _exc:
        frame = _exc.__traceback__
        caller = frame.tb_frame.f_code.co_qualname
        lineno = frame.tb_lineno
        err_args.append( ':'.join( (caller, str( lineno )) ))

    kwargs.setdefault( 'sep',  ': ' )
    kwargs.setdefault( 'file', sys.stderr )
    print( *err_args, *args, **kwargs )


def basename( name, extension=None ):
    base = os.path.basename( name )
    if base == '':
        return '.'
    if not extension:
        return base
    elif extension in ('.', '.*'):
        if (pos := base.rindex( '.' )) >= 0:
            return base[ :pos ]
    else:
        if extension[0] != '.':
            extension = '.' + extension
        if base.endswith( extension ):
            return base[ : -len( extension ) ]
    return base


# Pad all numbers to a width of 5, so that '6.0'
# will be less than '10.0' (00006 < 00010)
def make_number_padded_sortkey( val ):
    fn  = lambda mo: '{:05d}'.format( int( mo.group( 1 )))
    return re.sub( r'([0-9]+)', fn, val )


def xstat( file, follow_symlinks=False, error_level=1 ):
    if isinstance( file, os.stat_result ):
        return file
    elif hasattr( file, 'stat' ):
        return file.stat( follow_symlinks=follow_symlinks )
    else:
        try:
            return os.stat( file, follow_symlinks=follow_symlinks )
        except OSError as diag:
            errmsg ( diag, level=error_level )
            return None


def walk_fs_tree( root, callback, /, follow_symlinks=False, max_depth=None, xdev=None ):
    st = xstat( root, follow_symlinks=follow_symlinks )
    if st is None:
        return ()

    if xdev is True:
        root_fsid = st.st_dev
    if follow_symlinks and S_ISDIR( st.st_mode ):
        seen = set()


    def skip_node( st, depth ):
        if not S_ISDIR( st.st_mode ):
            return False
        if isinstance( max_depth, int ) and depth >= max_depth:
            return True
        if follow_symlinks:
            key = (st.st_dev, st.st_ino)
            if key in seen:
                debugpp( 'seen', {'st':st, 'depth':depth, 'key':key })
                return True
            else:
                seen.add( key )
        if xdev is True and st.st_dev != root_fsid:
                return True
        return False


    def walk( node, st=None, depth=0 ):
        if not st:
            st = xstat( node, follow_symlinks=follow_symlinks )
            if not st:
                return ()

        try:
            res = callback( node, st )
        except Exception as err:
            errmsg( err )
            return ()

        if res is None:
            return None
        elif res is True:
            result = []
        else:
            result = [res]

        if skip_node( st, depth ):
            return result
        elif S_ISDIR( st.st_mode ):
            try:
                dirlist = os.scandir( node )
            except OSError as diag:
                errmsg( diag )
                return ()

            for file in dirlist:
                try:
                    result.extend(
                        elt for elt in walk( file, depth=depth+1 ) if elt )
                except OSError as diag:
                    errmsg( diag )

        return result

    return walk( root, st )



def format_size( size ):
    scaled = scale_size( size )
    if scaled.endswith( ' B' ):
        return scaled[ :-2 ]
    return scaled


def format_time( time, fmt='%Y-%m-%d %H:%M:%S %z' ):
    frac_sec = time - int( time )
    if frac_sec:
        frac_sec = '{:9.9f}'.format( round( frac_sec, 9 ))[1:]
        fmt = fmt.replace( '%S', f'%S{frac_sec}' )
    return strftime( fmt, gmtime( time ))


def format_rdev( rdev: int ):
    return [ os.major( rdev ), os.minor( rdev ) ]


def format_gid( gid ):
    try:
        return grp.getgrgid( gid ).gr_name
    except KeyError:
        return str( gid )


def format_uid( uid ):
    try:
        return pwd.getpwuid( uid ).pw_name
    except KeyError:
        return str( uid )


def collect_exclude_p( md, exclude ):
    path = md[ 'path' ]
    base = basename( path )
    for pat in exclude:
        if isinstance( pat, re.Pattern ):
            if pat.search( base ):
                return True
        elif '/' in pat:
            if fnmatch.fnmatch( path, pat ):
                return True
        elif fnmatch.fnmatch( base, pat ):
            return True
    return False


def collect_stat_metadata( md, st ):
    verbose = option.verbose

    def add_attrs( *attrs ):
        for attr in attrs:
            try:
                md[ attr ] = getattr( st, 'st_' + attr )
            except AttributeError:
                pass

    add_attrs( 'mode', 'ino', 'nlink', 'uid', 'gid', 'size', 'atime', 'mtime', 'ctime' )
    if verbose:
        add_attrs( 'dev', 'rdev' )
        if st.st_rdev != 0:
            md[ 'rdev_tuple' ] = format_rdev( st.st_rdev )

    for attr in ( 'atime', 'ctime', 'mtime' ):
        if md[ attr ].is_integer():
            md[ attr ] = int( md[ attr ] )

    if verbose:
        extra = { 'mode_string'  : lambda st: filemode( st.st_mode ),
                  'mode_octal'   : lambda st: oct( st.st_mode ),
                  'user'         : lambda st: format_uid( st.st_uid ),
                  'group'        : lambda st: format_gid( st.st_gid ),
                  'size_string'  : lambda st: format_size( st.st_size ),
                  'atime_string' : lambda st: format_time( st.st_atime ),
                  'ctime_string' : lambda st: format_time( st.st_ctime ),
                  'mtime_string' : lambda st: format_time( st.st_mtime ),
                }
        for elt in extra:
            xform = extra[ elt ]
            try:
                md[ elt ] = xform( st )
            except KeyError:
                pass
    return md


def collect_posix1e_acl_metadata( md, st ):
    try:
        from posix1e import ( ACL,
                              has_extended,
                              TEXT_ABBREVIATE,
                              TEXT_NUMERIC_IDS, )
    except (ModuleNotFoundError, ImportError):
        return md

    file = md[ 'path' ]
    try:
        if has_extended( file ):
            flags = 0

            acl     = ACL( file=file )
            block   = acl.to_any_text( options=TEXT_ABBREVIATE|TEXT_NUMERIC_IDS )
            entries = block.decode().split( '\n' )
            md[ 'acl' ] = entries
    except OSError as diag:
        errmsg( diag )
    return



def collect_xattr_metadata( md, st ):
    follow_symlinks = option.follow_symlinks
    file = md[ 'path' ]
    xattr = {}
    try:
        names = os.listxattr( file, follow_symlinks=follow_symlinks )
        for name in names:
            try:
                value = os.getxattr( file, name )
                if name in ('security.selinux',) and value[-1] == 0:
                    value = value[ :-1 ]

                try:
                    if value.decode().isprintable():
                        value = value.decode()
                    else:
                        value = 'base64:' + b64encode( value ).decode()
                except UnicodeDecodeError:
                    value = 'base64:' + b64encode( value ).decode()
                xattr[ name ] = value
            except OSError:
                errmsg( diag )
    except OSError as diag:
        errmsg( diag )
    if xattr:
        md[ 'xattr' ] = xattr
    return md


def collect_file_metadata( file, st=None ):
    verbose         = option.verbose
    exclude         = option.exclude
    follow_symlinks = option.follow_symlinks

    md = {}
    if not st:
        st = xstat( file, follow_symlinks=follow_symlinks )
        if not st:
            return ()

    if option.xd and S_ISDIR( st.st_mode ):
        return True

    try:
        md[ 'path' ] = file.path
        if file.is_symlink():
            md[ 'symlink' ] = os.readlink( file.path )
    except AttributeError:
        md[ 'path' ] = file
        if S_ISLNK( st.st_mode ):
            md[ 'symlink' ] = os.readlink( file )

    if exclude and collect_exclude_p( md, exclude ):
        return ()

    try:
        collect_stat_metadata( md, st )
    except Exception as diag:
        errmsg( diag )

    try:
        collect_posix1e_acl_metadata( md, st )
    except Exception as diag:
        errmsg( diag )

    try:
        collect_xattr_metadata( md, st )
    except Exception as diag:
        errmsg( diag )

    return md



def pretty_print_metadata( metadata ):
    fields = ( 'ino', 'mode_string', 'nlink', 'user', 'group', 'size_string', 'mtime_string', 'path' )
    data = []
    for elt in metadata:
        row = [ elt.get( f, '' ) for f in fields ]
        if rdevstr := elt.get( 'rdev_string', None ):
            idx  = fields.index( 'size_string' )
            row[ idx ] = rdevstr
        if symlink := elt.get( 'symlink', None ):
            idx  = fields.index( 'path' )
            row[ idx ] = ' -> '.join( (elt[ 'path' ], symlink) )
        data.append( row )
    fmt, _ = mkrowfmt( data, fill={ 0:'>', 2:'>', 5:'>' })
    for row in data:
        print( fmt.format( *row ))


def identify_hardlinks( metadata ):
    hlinks = {}
    for elt in metadata:
        if not elt:
            continue
        if not S_ISREG( elt[ 'mode' ] ):
            continue
        ino = elt[ 'ino' ]
        try:
            hlinks[ ino ].append( elt )
        except KeyError:
            hlinks[ ino ] = [ elt ]

    for ino in hlinks:
        val = hlinks[ ino ]
        if len( val ) < 2:
            continue
        names = sorted( elt[ 'path' ] for elt in val )
        for elt in val:
            elt[ 'hardlink' ] = names
    return


def parse_file_patterns( *args ):
    patterns = []
    for pat in args:
        if len( pat ) > 2 and pat[0] == pat[-1] == '/':
            patterns.append( re.compile( pat[1:-1] ))
        else:
            patterns.append( pat )
    return patterns


def get_args():
    p = argparse.ArgumentParser()
    p.add_argument( '-F', '--follow-symlinks', action='store_true',  default=False )
    p.add_argument( '-J', '--json',            action='store_true',  default=False )
    p.add_argument( '-D', '--xd', '--exclude-directories', action='store_true',  default=False )
    p.add_argument( '-x', '--exclude',         action='append' )
    p.add_argument( '-m', '--max-depth',       action='store',       default=None, type=int )
    p.add_argument( '-v', '--verbose',         action='count',       default=0 )
    p.add_argument( '--xdev', '--one-file-system', action=argparse.BooleanOptionalAction, default=None )
    p.add_argument( 'files', nargs='+' )
    return p.parse_args()


def main():
    args = get_args()
    if not args.json:
        args.verbose = True

    global option
    option = args

    if args.exclude:
        patterns = parse_file_patterns( *args.exclude )
        option.exclude = patterns

    walk_kwargs = dict( follow_symlinks = args.follow_symlinks,
                        max_depth       = args.max_depth,
                        xdev            = args.xdev, )
    callback = collect_file_metadata

    metadata = []
    for file in args.files:
        walked = walk_fs_tree( file, callback, **walk_kwargs )
        #debugpp( walked )
        if walked:
            metadata.extend( elt for elt in walked if elt )
    identify_hardlinks( metadata )

    metadata.sort( key=lambda elt: make_number_padded_sortkey( elt['path'] ))
    if args.json:
        metadata_by_path = { elt[ 'path' ]: elt for elt in metadata }
        serialized = json.dumps( metadata_by_path, indent=2, sort_keys=False )
        print( serialized )
    else:
        pretty_print_metadata( metadata )



if __name__ == '__main__':
    try:
        main()
        sys.exit( err_total )
    except KeyboardInterrupt:
        sys.exit( (1<<7) | 2 )


# eof
