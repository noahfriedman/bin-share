#!/bin/sh
# msedutil --- wrapper for sedutil-cli
# Author: Noah Friedman <friedman@splode.com>
# Created: 2022-04-20
# Public domain

# TODO: remove dependency on perl so script can be used in rescue environment
# Not sure if busybox awk is up to the task.

cmd_arg=
dev_arg=
pba_arg=
tpm_chk=

: ${SEDUTIL:=sedutil-cli}

######
##
######

askpass()
{
    case $# in 0 ) set "Password" ;; esac

    stty_g=`stty -g`
    trap 'stty "$stty_g"' 0 1 2 3 15
    stty -echo
    echo -n "$*:" 1>&2
    read pass
    echo 1>&2
    stty "$stty_g"
    trap '' 0 1 2 3 15
    echo "$pass"
}

askpass_new()
{
    while :; do
        pass1=`askpass "New ${1-Password}"`
        pass2=`askpass "New ${1-Password} (confirm)"`
        case $pass1 in $pass2 ) break ;; esac

        echo "Input passwords do not match; please enter again" 1>&2
        echo 1>&2
    done
    echo "$pass2"
}

getpass_adm() { adm_pass=`askpass "Admin1 Password"`; }
getpass_sid() { sid_pass=`askpass "SID Password"`; }
getpass_new() { new_pass=`askpass_new`; }

######
##
######

sedutil() { $SEDUTIL "$@"; }

sedutil_query()
{
    sedutil --query "${1-$dev_arg}" |
        perl -ne '
            unless (/=/) {
                /^(\S{4})\S*\s+(?:[\d.]+\s+)?(\S{4})/i
                and $prefix = ucfirst( $1 ) . ucfirst( $2 );
                next;
            }
            s/[\0\r]+//g;
            s/^\s+//;
            s/\s+$/\n/;
            s/(=\s*N)\.(\s)/$1,$2/; # bug
            s/\s*=\s*/=/g;
            if (/,/) {
                s/,\s*/\n/g;
                s/[ \t]+/_/g;
            } else {
                s/\s+/\n/g;
            }
            s/^/$prefix:/mg;
            print $_;'
}

query_match() { sedutil_query | grep -E -i "$@"; }

sedutil_lockingranges()
{
    sedutil --listlockingranges "$adm_pass" "${1-$dev_arg}" |
        perl -ne '
            if (/^LR(\d+)\s+Begin\s+(\d+)\s+for\s+(\d+)/)
              { ($lr, $beg, $end) = ( $1, $2, $3, ) }
            elsif (/=/)
              {
                $ena = /=\s*(\S)\s+\S+\s*=\s*(\S)/g && $1 . $2;
                $ena = ($ena =~ /Y/) ? "Y" : "N";
                $mode = /=\s*(\S)\s+\S+\s*=\s*(\S)/g && $1 . $2;
                $mode = { NN => "RW", YY => "LK",
                          NY => "RO", YN => "WO", }->{$mode};
                if ($lr == 0)
                  { print "LR$lr=$ena:$mode\n" }
                else
                  {
                    $st = "$ena:$mode:$beg:$end";
                    next if $st eq "N:RW:0:0";
                    print "LR$lr=$st\n";
                  }
              }'
}

######
##
######

catZ()
{
    case $1 in
        *.gz   ) gzip  -dc "$1" ;;
        *.xz   ) xz    -dc "$1" ;;
        *.lz   ) lzip  -dc "$1" ;;
        *.bz2  ) bzip2 -dc "$1" ;;
    esac
}

prep_pba()
{
    if ! [ -f "$pba_arg" ]; then
        usage "$pba_arg missing" 1>&2
    fi

    case $pba_arg in
        *.[glx]z | *.bz2 )
            pba_orig=$pba_arg
            pba_tmp=${TMPFILE:-/tmp}/${pba_orig##*/}
            pba_tmp=${pba_tmp%.*}$$
            trap 'rm -fv "$pba_tmp"' 0 1 2 3 15
            umask 077
            catZ "$pba_orig" > "$pba_tmp"
            pba_arg=$pba_tmp

            echo Using "$pba_arg" for temporary uncompressed pba image.
            ;;
    esac

}

######
##
######

opal_setup()
{
    if [ -n "$pba_arg" ]; then
        prep_pba
    fi

    sedutil --initialSetup              debug "$dev_arg"
    # These are performed already as part of setup.
    #sedutil --disableLockingRange 0    debug "$dev_arg"
    #sedutil --setLockingRange     0 RW debug "$dev_arg"
    #sedutil --setMBRDone         on    debug "$dev_arg"

    if [ -n "$pba_arg" ]; then
        # n.b. you don't need to set MBRDone `off' before writing the PBA
        sedutil --loadPBAimage debug "$pba_arg" "$dev_arg"
    fi

    # The SID and Admin1 passwords do not have to match but it makes things easier.
    # The SID password is used for initializing and unconfiguring OPAL entirely
    # The Admin1 password is used for everyday operations.
    test ".$sid_pass" != ".debug" && sedutil --setSIDPassword debug "$sid_pass" "$dev_arg"
    test ".$adm_pass" != ".debug" && sedutil --setAdmin1Pwd   debug "$adm_pass" "$dev_arg"

    echo "Power-on locking enabled but currently unlocked"
}

opal_revert()
{
    opal_disable

    sedutil --revertNoErase "$adm_pass" "$dev_arg"
    if query_match LockingEnabled=N; then
        sedutil --revertTPer "$sid_pass" "$dev_arg"
    else
        fatal "NOT executing --revertTPer as it might erase drive."
    fi
}

opal_enable()
{
    sedutil --enableLockingRange  0     "$adm_pass" "$dev_arg"
    sedutil --setMBREnable        on    "$adm_pass" "$dev_arg"
}

opal_disable()
{
    sedutil --setlockingrange     0 RW  "$adm_pass" "$dev_arg"
    sedutil --disableLockingRange 0     "$adm_pass" "$dev_arg"
    sedutil --setMBREnable        off   "$adm_pass" "$dev_arg"
}

opal_lock()
{
    sedutil --setLockingRange     0 LK  "$adm_pass" "$dev_arg"
    sedutil --setMBRDone          off   "$adm_pass" "$dev_arg"
}

opal_unlock()
{
    sedutil --setLockingRange     0 RW  "$adm_pass" "$dev_arg"
    sedutil --setMBRDone          on    "$adm_pass" "$dev_arg"
}

opal_query()
{
    sedutil_query
}

opal_status()
{
    sedutil_query | sed -ne '/LockFunc:/!d' -e 's///p'
    sedutil_lockingranges
}

opal_setpass_adm()
{
    sedutil --setAdmin1Pwd   "$adm_pass" "$new_pass" "$dev_arg"
}

opal_setpass_sid()
{
    sedutil --setSIDPassword "$sid_pass" "$new_pass" "$dev_arg"
}

opal_msid()
{
    sedutil --printDefaultPassword "$dev_arg" | sed -e 's/^MSID: *//'
}

######
##
######

fatal()
{
    echo "${0##*/}:" "$@" 1>&2
    exit 1
}

usage()
{
    exec 1>&2
    case $# in
        0 ) : ;;
        * ) echo "${0##*/}: $@"; echo ;;
    esac
    echo "Usage: ${0##*/} setup               /dev/sdX  [/path/to/pba.img{.gz}]"
    echo "       ${0##*/} revert              /dev/sdX"
    echo "       ${0##*/} [enable | disable]  /dev/sdX"
    echo "       ${0##*/} [lock   | unlock]   /dev/sdX"
    echo "       ${0##*/} [query  | status]   /dev/sdX"
    echo "       ${0##*/} setpass [adm | sid] /dev/sdX"
    echo "       ${0##*/} msid                /dev/sdX"
    echo ""
    echo "The PBA is usually named something like UEFI64-*.img{.gz}"
    exit 1
}

check_allow_tpm()
{
    # n.b. allow_tpm not required for nvme drives
    case $tpm_chk:${dev_arg##*/} in
        :sd* ) : ;;
        *    ) return 0 ;;
    esac

    case `uname -s` in
        Linux )
            param=/sys/module/libata/parameters/allow_tpm
            errmsg="$dev_arg: libata.allow_tpm is not enabled; cannot continue"
            if [ -f $param ]; then
                read allow_tpm < $param
                case $allow_tpm in
                    '' | 0 ) fatal "$errmsg" ;;
                esac
            else
                fatal "$errmsg";
            fi ;;
    esac
    tpm_chk=1
}

main()
{
    case ${UID-`id -u`} in
        0 ) : ;;
        * ) exec sudo "$0" "$@" ;;
    esac

    case $1:$# in
        setpass:3 | passwd:3 ) : ;;
        setpass:* | passwd:* ) usage ;;

        setup:3 ) : ;;
        *:2     ) : ;;
        *:*     ) usage ;;
    esac

    case $1 in
        query | msid )
            cmd_arg=$1 ; shift
            dev_arg=$1 ; shift
            ;;

        lock | unlock | enable | disable | status )
            cmd_arg=$1 ; shift
            dev_arg=$1 ; shift
            check_allow_tpm
            getpass_adm
            ;;

        setup | revert )
            cmd_arg=$1 ; shift
            dev_arg=$1 ; shift
            if [ -n "$1" ]; then
                pba_arg=$1
                shift
            fi
            check_allow_tpm
            getpass_sid
            if [ ".$sid_pass" = ".debug" ]; then
                adm_pass=$sid_pass
            else
                getpass_adm
            fi
            ;;

        setpass | passwd )
            shift
            dev_arg=$2
            check_allow_tpm
            case $1 in
                adm | admin1 )
                    cmd_arg=setpass_adm ; shift
                    getpass_adm
                    ;;

                sid )
                    cmd_arg=setpass_sid ; shift
                    getpass_sid
                    ;;

                * ) usage "password type must be 'sid' or 'admin1'" ;;
            esac
            shift  # dev_arg already set
            getpass_new
            ;;

        * ) usage "$1: Unknown command" ;;
    esac

    check_allow_tpm

    set -e
    opal_$cmd_arg "$@"
}

main "$@"

# eof
