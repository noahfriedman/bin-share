#!/usr/bin/env python
# pyrepl --- interactive python interpreter with easier to read output

# Author: Noah Friedman <friedman@splode.com>
# Created: 2018-09-05
# Public domain

# Commentary:
# Code:

# Copy namespace now, before any modules are imported.
repl_locals = dict( locals() )

import readline
import rlcompleter
import code
import subprocess

import atexit
import os
import platform
import pprint
import re
import sys


# Provide saved history and tab completion on python symbols
# Shamelessly stolen from Python library manual
class Repl( code.InteractiveConsole ):
    def __init__( self, locals=None, history_file=None, history_size_max=1024 ):
        code.InteractiveConsole.__init__( self, locals )
        readline.parse_and_bind( 'tab: complete' )

        if history_file is None:
            histdir  = os.getenv( 'XDG_CACHE_HOME' ) or os.getenv( 'HOME' )
            self.history_file = os.path.join( histdir, ".pyrepl_history" )
        else:
            self.history_file = history_file
        self.history_size_max = history_size_max
        self.history_import()
        atexit.register( self.history_export )

    def history_import( self ):
        if self.history_file:
            try:
                readline.read_history_file( self.history_file )
            except IOError:           # python2
                pass
            except FileNotFoundError: # python3, undef in python2
                pass

    def history_export( self ):
        if self.history_file:
            readline.set_history_length( self.history_size_max )
            readline.write_history_file( self.history_file )


# python2 doesn't support super().method call syntax,
# so instead we use self.super.method
class _super( object ):
    super = property( lambda self: super( type( self ), self ) )

# I think I'm inching toward just writing another pretty printer from scratch.
class ReplPrettyPrinter( pprint.PrettyPrinter, _super ):
    def __init__( self, *args, **kwargs ):
        self._re_nonbinary = None
        self._max_width    = 1024
        self.show_class    = True
        self.super.__init__( *args, **kwargs )

    def _format( self, items, *rest ):
        # Intercept dict-like objects before using their non-prettyprinting repr
        if callable( items ): # class constructors
            self.super._format( items, *rest )
        elif hasattr( items, 'items' ) or hasattr( items, '_asdict' ):
            self._pprint_dictlike( items, *rest )
        elif isinstance( items, list ):
            self._pprint_list( items, *rest )
        elif isinstance( items, str ):
            self._pprint_str( items, *rest )
        else:
            self.super._format( items, *rest )


    # This method override adds padding so that all keys in a dict are
    # aligned to the same column. That is, they are all indented to the
    # length of the longest key.
    def _format_dict_items( self, items, stream, indent, allowance, context, level ):
        items_repr = [ (self._repr( key, context, level), ent) for key, ent in items ]
        max_keylen = max( len( elt[0] ) for elt in items_repr ) + 1
        write      = stream.write
        indent    += self._indent_per_level
        delimnl    = ',\n' + ' ' * indent
        last_index = len( items_repr ) - 1

        for i, (rep, ent) in enumerate( items_repr ):
            last = i == last_index
            write( rep )
            write( ' ' * (max_keylen - len( rep )))
            write( ': ' )
            self._format( ent,
                          stream,
                          indent + max_keylen + 2,
                          allowance if last else 1,
                          context,
                          level )
            if last:
                write( delimnl[ 0 : -self._indent_per_level ])
            else:
                write( delimnl )


    def _surround_obj( self, obj, beg='', end='', base=str ):
        if self.show_class and type( obj ) is not base:
            try:
                beg = '{0.__module__}.{0.__name__}({1}'.format(
                    type( obj ),
                    (  ' ' if beg == '' else beg)
                )
                end = (' ' if end == '' else end) + ')'
            except AttributeError:
                pass
        return beg, end


    # This does a better job of formatting dict-like types like os.environ
    def _pprint_dictlike( self, obj, stream, indent, allowance, context, level ):
        write = stream.write
        begstr, endstr = self._surround_obj( obj, '{', '}', dict )
        allowance += len( endstr )

        if hasattr( obj, '_asdict' ):  # e.g. collections.namedtuple
            obj = obj._asdict()

        if hasattr( self, '_sort_dicts' ):
            if self._sort_dicts:
                items = sorted( obj.items(), key=pprint._safe_tuple )
            else:
                items = obj.items()
        else:
            items = sorted( obj.items(), key=lambda k: repr( k ))

        write( begstr )
        if len( items ):
            if self._indent_per_level > 1:
                write( (self._indent_per_level - 1) * ' ' )
            indent += len( begstr ) - 1
            self._format_dict_items( items, stream, indent, allowance, context, level )
        write( endstr )


    def _pprint_list(self, obj, stream, indent, allowance, context, level):
        write = stream.write
        begstr, endstr = self._surround_obj( obj, '[', ']', list )
        indent    += max( 0, len( begstr ) - 1)
        allowance += len( endstr )
        write( begstr )
        self._format_items( obj, stream, indent, allowance, context, level )
        if len( obj ) > 1:
            write( ',\n' + ' ' * indent + endstr )
        else:
            stream.write( endstr )


    def _pprint_set(self, obj, stream, indent, allowance, context, level):
        write = stream.write
        begstr, endstr = self._surround_obj( obj, '{', '}', set )
        indent += max( 0, len( begstr ) - 2)
        allowance += len( endstr )

        write( begstr )
        obj = sorted( obj, key=pprint._safe_key )
        self._format_items( obj, stream, indent, allowance, context, level )
        if len( obj ) > 1:
            write( ',\n' + ' ' * indent + endstr )	# close on new line
        else:
            write( ' ' + endstr )			# close on final line


    def _maxwidth( self, width=None ):
        if width is None:
            width = self._width
        return max( width, self._max_width )


    # If a string is multiline, extend width so any breaks are at line endings
    def _pprint_str( self, obj, stream, indent, allowance, context, level ):
        write = stream.write
        begstr, endstr = self._surround_obj( obj, '', '', str )
        indent    += max( 0, len( begstr ) - 1)
        allowance += len( endstr )

        write( begstr )
        nl = obj.find( '\n' )
        if len( obj ) > nl+1 > 0: # first nl is not at very end of str
            try:
                _width = self._width
                self._width = self._maxwidth()
                self.super._pprint_str( obj, stream, indent, allowance, context, level )
            finally:
                self._width = _width
        else:
            self.super._pprint_str( obj, stream, indent, allowance, context, level )
        write( endstr )


    def _pprint_bytes( self, obj, stream, indent, *rest ):
        if self._re_nonbinary is None:
            self._re_nonbinary = re.compile( b'[^\r\t\n\x20-\x7e]' )

        if ( len( obj ) < self._maxwidth()
             and not self._re_nonbinary.search( obj )):
            try:
                saved_width = self._width
                self._width = self._maxwidth() + indent
                self._pprint_readable_bytes( obj, stream, indent, *rest )
            finally:
                self._width = saved_width
        else:
            self.super._pprint_bytes( obj, stream, indent, *rest )


    # If a binary string is apparently regular ascii, extend
    # width so any breaks are at line endings.
    def _pprint_readable_bytes( self, obj, stream, indent, allowance, context, level ):
        write = stream.write
        nl = obj.find( b'\n' )
        if not (len( obj ) > nl+1 > 0): # first nl is at very end of obj
            write( self._repr( obj, context, level ) )
            return
        indent += 1
        deliml = '\n' + ' ' * indent
        lines = obj.splitlines( True )
        write( '(' )
        for i, row in enumerate( lines ):
            write( repr( row ))
            if i+1 < len( lines ):
                write( deliml )
            else:
                write( ')' )


    def _pprint_site_Printer( self, obj, *args ):
        self._pprint_str( str( obj ), *args )


    try:
        _dispatch = pprint.PrettyPrinter._dispatch.copy()
        _dispatch[                str.__repr__] = _pprint_str
        _dispatch[              bytes.__repr__] = _pprint_bytes
        _dispatch[               list.__repr__] = _pprint_list
        _dispatch[                set.__repr__] = _pprint_set
        _dispatch[          frozenset.__repr__] = _pprint_set
        _dispatch[        os._Environ.__repr__] = _pprint_dictlike
        _dispatch[copyright.__class__.__repr__] = _pprint_site_Printer
        _dispatch[     help.__class__.__repr__] = _pprint_site_Printer
    except AttributeError:
        pass


repl_pp = ReplPrettyPrinter( indent=2, width=72 )
def pp( *args, **kwargs ):
    for arg in args:
        repl_pp.pprint( arg, **kwargs )


def bt( *cmd ):
    output = subprocess.check_output( cmd ).decode( sys.stdout.encoding )
    return output.rstrip( ' \t\r\n' )


def load( filename ):
    with open( filename, 'r' ) as f:
        text = f.read()
    text.replace( '\r\n', '\n' )
    exec( text, repl_locals )


def pyrepl():
    banner = '{} {}.{}.{} [{}] {}-{}'.format(
        platform.python_implementation(),
        sys.version_info.major,
        sys.version_info.minor,
        sys.version_info.micro,
        platform.python_build()[1],
        sys.platform,
        platform.machine(), )

    # Keep the initial namespace of the repl fairly clean,
    # except for some convenience functions.
    # (having access to repl_pp lets us change _width on occasion.
    # Set the current namespace to __pyrepl__ so loading random
    # scripts doesn't fire off their "if __main__" blocks.
    repl_locals.update( { '__name__' : '__pyrepl__',
                          'bt'       : bt,
                          'load'     : load,
                          'repl_pp'  : repl_pp, } )

    # Don't display 'None' if there is nothing to display.
    sys.displayhook = lambda arg: (arg is None) or pp( arg )
    repl = Repl( locals=repl_locals )
    try:
        repl.interact( banner=banner, exitmsg='' )
    except TypeError:
        repl.interact( banner=banner )  # python2.7


if __name__ == '__main__':
    pyrepl()

# pyrepl ends here
