#!/usr/bin/env bash
# start-xvnc-server --- launch vnc server
# Author: Noah Friedman <friedman@splode.com>
# Public domain.

# $Id: start-xvnc-server,v 1.2 2008/11/18 07:09:08 friedman Exp $

# Commentary:
# Code:

# Name by which this script was invoked.
progname=`echo "$0" | sed -e 's/[^\/]*\///g'`

# To prevent hairy quoting and escaping later.
bq='`'
eq="'"

usage="Usage: $progname {options}

Options are:
-n, --name         NAME		   Set server desktop-name.
-d, --display      VNCDISPLAY      Set server display number.
-g, --geometry     WIDTHxHEIGHT    Set server size.
-D, --depth        DEPTH           Set framebuffer depth: 8, 16, or 24
"

# Usage: eval "$getopt"; value=$optarg
# or     optarg_optional=t; eval "$getopt"; value=$optarg
#
# This function automatically shifts the positional args as appropriate.
# The argument to an option is optional if the variable `optarg_optional'
# is non-empty.  Otherwise, the argument is required and getopt will cause
# the program to exit on an error.  optarg_optional is reset to be empty
# after every call to getopt.  The argument (if any) is stored in the
# variable `optarg'.
#
# Long option syntax is `--foo=bar' or `--foo bar'.
# For optional args, you must use the `--foo=bar' long option syntax
# if the argument starts with `-', otherwise the argument will be ignored
# and treated as the next option.
getopt='
  { optarg=
    case $1 in
      --*=* ) optarg=`echo "$1" | sed -e "1s/^[^=]*=//"` ; shift ;;
      -* ) case ${2+set}:$optarg_optional in
             set:   ) optarg=$2 ; shift ; shift ;;
             set:?* ) case $2 in
                        -* ) shift ;;
                        *  )  optarg=$2; shift; shift ;;
                      esac ;;
             : ) option=$1
                 case $option in
                   --*=* ) option=`echo "$option" | sed -e "1s/=.*//;q"` ;;
                 esac
                 exec 1>&2
                 echo "$progname: option $bq$option$eq requires argument."
                 echo "$progname: use $bq--help$eq to list option syntax."
                 exit 1 ;;
             * ) shift ;;
           esac ;;
    esac
    optarg_optional=
  }'

geom=1024x768
depth=24
name=Xvnc

# Parse command line arguments.
# Make sure that all wildcarded options are long enough to be unambiguous.
# It's a good idea to document the full long option name in each case.
# Long options which take arguments will need a `*' appended to the
# canonical name to match the value appended after the `=' character.
while : ; do
  case $# in 0) break ;; esac

  case $1 in
    -h | --help | --h* )
      echo "$usage" 1>&2
      exit 0 ;;

    -d | --display* | --di* )
      eval "$getopt"
      XVNCDISPLAY=$optarg ;;

    -D | --depth* | --de* )
      eval "$getopt"
      depth=$optarg ;;

    -g | --geometry* | --g* )
      eval "$getopt"
      geom=$optarg ;;

    -n | --name* | --n* )
      eval "$getopt"
      name=$optarg ;;

    -- ) shift; break ;; # Stop option processing
    -? | --* )
      case $1 in
        --*=* ) arg=`echo "$1" | sed -e 's/=.*//'` ;;
        * )     arg=$1 ;;
      esac
      exec 1>&2
      echo "$progname: unknown or ambiguous option $bq$arg$eq"
      echo "$progname: Use $bq--help$eq for a list of options."
      exit 1 ;;
    -??* ) # Split grouped single options into separate args and try again
      optarg=$1
      shift
      set fnord `echo "x$optarg" | sed -e 's/^x-//;s/\(.\)/-\1 /g'` ${1+"$@"}
      shift ;;
    * ) break ;;
  esac
done

valid_geoms='
  1600x1200
  1400x1050
  1280x1024
  1280x960
  1152x864
  1024x768
   800x600
   640x480
'

case `echo ' ' $valid_geoms ' '` in
  *' '$geom' '* ) : ;;
  * )
    exec 1>&2
    echo "Use one of the following resolutions:"
    echo $valid_geoms
    exit 1
esac

case $name in
  vmware )
    # The irregular display size accounts for the display used by the emulated
    # workstation running under vmware, plus the height of the menu bar
    # displayed by vmware itself.
    extra_w=8
    extra_h=32 # 64 if including toolbar

    eval geom=`echo $geom | sed -e 's/\([0-9]*\)x\([0-9]*\)/$((\1 + $extra_w))x$((\2 + $extra_h))/'`
   ;;
esac

displaynum=${XVNCDISPLAY-10}
displaynum=${displaynum#*:}

# default
javadir=/usr/share/vnc/classes
for dir in /usr/share/vnc/classes /usr/local/share/vnc/classes ; do
  if [ -d "$dir" ]; then
    javadir=$dir
    break
  fi
done

# Figure out if we're running tightvnc or real/tiger vnc
verstring=`Xvnc -version 2>&1 | grep '^Xvnc'`
case $verstring in
  *tight* )
    set fnord -dontdisconnect \
              -httpd "$javadir" \
              -httpport $((5800 + $displaynum)) \
              ${1+"$@"}
    shift ;;
  *TigerVNC* | *' version 4.'* )
    set fnord -DisconnectClients=0 \
              -ZlibLevel=3 \
              -httpd "$javadir" \
              -httpPort $((5800 + $displaynum)) \
              ${1+"$@"}
    shift ;;
esac

set fnord ${Xvnc-vncserver} \
          :$displaynum \
          -geometry $geom \
          -depth $depth \
          -name $name \
          ${1+"$@"}
shift

echo + ${1+"$@"}

# The vncserver script will background itself
exec ${1+"$@"}

# eof
