#!/bin/sh

# Like `ldd', but just print the immediate shared library dependency names
# of the specified elf object.  `ldd' does a recursive traversal of the
# object and all its dependencies' dependencies, and prints out the full
# list of dependencies and their resolved filesystem path.

needed()
{
    $READELF -d "$1" \
        | sed -e '/RUNPATH/{s/.*runpath: \[\(.*\)\]/RUNPATH=\1/p;}' \
              -e '/RPATH/{s/.*rpath: \[\(.*\)\]/RPATH=\1/p;}' \
              -e '/SONAME/{s/.*soname: \[\(.*\)\]/SONAME=\1/p;}' \
              -e '/NEEDED/!d' \
              -e 's/^.*NEEDED.*Shared library: *//' \
              -e 's/\[\(.*\)\]/\1/'
}

main()
{
    # prefer eu-readelf over readelf;
    # binutils can be much slower than elfutils.
    if type eu-readelf > /dev/null 2>&1; then
        : ${READELF:=eu-readelf}
    else
        : ${READELF:=readelf}
    fi

    case $# in
        0 ) echo "Usage: $0 [files ...]" 1>&2
            exit 1 ;;

        1 ) needed "$1" ;;

        * ) for f in "$@"; do
                echo "$f:"
                needed "$f" | sed -e 's/^/	/'
                echo
            done ;;
    esac
}

main "$@"

# eof
