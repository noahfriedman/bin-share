#!/usr/bin/env perl
# ptr --- resolve IP addresses to host names

# Author: Noah Friedman <friedman@splode.com>
# Created: 2001-11-27
# Public domain

# Commentary:

# Usage: ptr 192.168.1.30 127.0.0.1 ...
# or invoke with no arguments and feed addresses via stdin.  IP addresses
# will be picked out of any text, so the input format is not very
# important.

# The command `adnshost', from the adns (asynchronous dns) package is required.
# See http://www.chiark.greenend.org.uk/~ian/adns/ or ftp://ftp.gnu.org/adns/

# Code:

use strict;
use warnings qw(all);

use List::Util qw(max);

# Scan input text for IP addresses and pick them out
sub snarf_ips
{
  local $/ = undef;  # read in all at once
  local $_;
  my @addr;
  while (<STDIN>)
    {
      push @addr, $1
        while (m/( (?:\d+\.\d+\.\d+\.\d+(?:\.in-addr\.arpa|))
                 | (?:(?:(?:[0-9a-f]\.){32})ip6\.arpa)
                 | (?:(?:[0-9a-f]{1,4}:){7}[0-9a-f])
                 | (?:[0-9a-f:]*::[0-9a-f:]+)
                 | (?:[0-9a-f:]+::[0-9a-f:]*)
                 )/igx);
    }
  return @addr;
}

sub ip2arpa
{
  local $_ = shift;
  if ( /^(\d+)\.(\d+)\.(\d+)\.(\d+)$/ )
    {
      s//$4.$3.$2.$1.in-addr.arpa/;
    }
  elsif ( /^[0-9a-f:]+$/i )
    {
      $_ = lc( $_ );
      my @quad = split( /:/, $_ );
      map { $_ = ( $_ eq '' # "::" field, if any
                   ? '0000' x (9 - scalar @quad)
                   : sprintf( '%04x', hex( $_ )) );
          } @quad;
      my @b = split( //, reverse( join( '', @quad ) ));
      $_ = join( '.', @b ) . '.ip6.arpa';
    }
  return $_;
}

sub cmd_io
{

  pipe( my ($pr, $pw) ) or die "pipe: $!\n";
  my $pid = open( my $out, "-|" ) // die "open fork: $!";
  return ($pw, $out) if $pid; # parent

  # child
  close( $pw );
  open( STDIN,  "<&=" . fileno( $pr ));
  open( STDERR, ">&=1" );  # send stderr to stdout
  exec( @_ ) or die "exec: $_[0]: $!\n";
}

sub adns
{
  my @cmd = ( 'adnshost',
              '--no-env',
              '--fmt-inline',
              '--pipe',
              '--type',  'ptr-', # don't check forward and reverse match
            );

  my ($iwh, $orh) = cmd_io( @cmd );
  map { print $iwh $_, "\n" } @_;
  close( $iwh );

  local $/ = undef;  # read all data at once
  local $_ = <$orh>;
  wait;
  close( $orh );
  return $_;
}

sub parse_results
{
  my ($data, $arpamap) = @_;
  my @result;
  for my $line (split( /[\r\n]+/, $data ))
    {
      if ($line =~ /^;\s*(.*?)\s+(\S+)\s+\$/)
        {
          my ($err, $revip) = ($1, $2);
          my $ip = $arpamap->{$revip} || $revip;
          push @result, [$ip, "; $err"];
        }
      else
        {
          my ($revip, $type, $name) = split( /\s+/, $line );
          my $ip = $arpamap->{$revip} || $revip;
          push @result, [$ip, $name];
        }
    }
  return @result;
}

sub main
{
  my %arpamap;

  push @_, snarf_ips() unless @_;
  map { my $orig = $_;
        $_ = ip2arpa( $_ ) unless /\.arpa/i;
        $arpamap{$_} = $orig;
      } @_;

  my $output = adns( @_ );
  my @result = parse_results( $output, \%arpamap );

  my $maxlen = max( map { length $_->[0] } @result );
  my $fmt    = sprintf( "%%-%ds %%s\n", $maxlen );

  map { printf( $fmt, @$_ ) } @result;
}

main( @ARGV );

# ptr ends here
