#!/usr/bin/env perl
# brcm-firmware-map -- map hex firmware files to linux hcd file names
# Author: Noah Friedman <friedman@splode.com>
# Created: 2016-05-21
# Public domain

# Commentary:

# Usage: brcm-firmware-map /path/to/bcbtums.inf another.inf ...

# Debugging output can be enabled/dissabled per function and/or line number, e.g.
# 	PP_DEBUG=all,!parse:108 brcm-firmware-map ...
#	PP_DEBUG=bcm_devmap brcm-firmware-map ...
#
# Suggested conversion script:
#
#       #!/bin/sh
# 	mkdir -p hcd;
#
# 	brcm-firmware-map "$@" |
# 	    while read hex hcd; do
# 	        hex2hcd -o hcd/$hcd hex/$hex &&
# 	            touch -r hex/$hex hcd/$hcd
# 	    done

# Most recent firmware files can be found via
# 	http://www.catalog.update.microsoft.com/Search.aspx?q=Broadcom+bluetooth

# Code:

use strict;
use warnings qw(all);

use Regexp::Grammars;

use FindBin;
use lib "$FindBin::Bin/../../lib/perl";
use lib "$ENV{HOME}/lib/perl";

use NF::PrintObject qw(__PP_DEBUG);

# Assumes comments have been completely stripped
my $ini_grammar
  = qr{ <nocontext:> <ini>

        <rule:  ini>        <[section]>+
        <rule:  section>    \[ <name> \] <[data]>*

        <token: name>        .+
        <rule:  data>       <key> \= <val> | <val>
        <rule:  key>        [^][\s]+
        <rule:  val>        [^][\r\n]+
      }mx;

sub file_contents
{
  open (my $fh, $_[0]) || die "$_[0]: $!\n";
  local $/ = undef;
  scalar <$fh>;
}

sub parse
{
  my $text = file_contents (shift);
  $text =~ s/\s*\r//g;
  $text =~ s/\s*;.*//g;

  __PP_DEBUG { \%/ };
  return unless $text =~ $ini_grammar;

  my %inf;
  for my $section (@{$/{ini}->{section}})
    {
      my ($name, $data) = ($section->{name}, $section->{data});
      if (exists $data->[0]->{key})
        {
          for my $elt (@$data)
            {
              my $key = $elt->{key};
              my $val = $inf{$name}->{$key} ||= [];

              my @new = split (/\s*,\s*/, $elt->{val}, -1);
              __PP_DEBUG { \@new };
              if (@new > 1) { push @$val, \@new; }
              else { push @$val, @new; }
              __PP_DEBUG { $val };
            }
        }
      else
        {
          $inf{$name} = [ map { my @l = split (/\s*,\s*/, $_->{val}, -1);
                                @l > 1 ? \@l : @l;
                              } @$data ];
        }
    }
  __PP_DEBUG { \%inf };
  return \%inf;
}

sub get
{
  my ($obj, $section) = (shift, shift);

  __PP_DEBUG { $section };
  my $data = $obj->{$section};
  return unless $data;
  __PP_DEBUG { $data, @_ };
  unless (@_)
    {
      if (ref $data eq 'HASH')
           { return wantarray ? %$data : $data; }
      else { return wantarray ? @$data : $data; }
    }

  my @result = (ref $data eq 'HASH'
                ? map { exists $data->{$_} ? @{$data->{$_}} : () } @_
                : map { @{$data->[$_]} } @_);
  __PP_DEBUG { \@result };
  return unless @result;
  return wantarray ? @result : \@result;
}

sub bcm_devmap
{
  my $obj = shift;

  my @manuf = get ($obj, 'Manufacturer', '%MfgName%', '%MfgName64%');
  my $suffix = $manuf[0]->[2];
  __PP_DEBUG { $suffix, @manuf };

  my @sections = map { my $prefix = shift @$_;
                       map { $prefix.'.'.$_ } @$_;
                     } @manuf;
  __PP_DEBUG { \@sections };

  my %devmap;
  map { my $section = get ($obj, $_);
        __PP_DEBUG { $_, $section };
        for my $elt (values %$section)
          {
            __PP_DEBUG { $elt };
            for my $row (@$elt)
              {
                __PP_DEBUG { $row };
                my ($key, $val) = @$row;
                $devmap{$key} = sprintf ("%s-%s.hcd", lc $1, lc $2)
                  if $val && $val =~ /USB.VID_([\da-f]+).PID_([\da-f]+)/i;
              }
          }
      } @sections;
  __PP_DEBUG { \%devmap };
  return (\%devmap, $suffix);
}

sub bcm_hexfile
{
  my ($obj, $dev, $suffix) = @_;

  my @level1;
  for my $case_suffix ($suffix, uc ($suffix), lc ($suffix))
    {
      @level1 = get ($obj, join ('.', $dev, $case_suffix ), "CopyFiles");
      last if @level1;
    }
  grep { /\.hex$/
       } map { get ($obj, $_)
             } @level1;
}

sub main
{
  my @list;
  for my $file (@_)
    {
      my $obj = parse ($file);
      next unless $obj;

      my ($devmap, $suffix) = bcm_devmap ($obj);
      push @list, map
        { my ($hf) = bcm_hexfile ($obj, $_, $suffix);
          if (defined $hf)
            {
              my $prefix = $1 if $hf =~ /^(.*?)_/;
              sprintf "%s\t%s-%s\n", $hf, $prefix, $devmap->{$_};
            }
        } keys %$devmap;
    }
  print sort @list;
}

main (@ARGV);

# eof
