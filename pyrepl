#!/usr/bin/env python
# pyrepl --- interactive python interpreter with easier to read output

# Author: Noah Friedman <friedman@splode.com>
# Created: 2018-09-05
# Public domain

# Commentary:
# Code:

# Copy namespace now, before any modules are imported.
repl_locals = dict( locals() )

import readline
import rlcompleter
import code
import subprocess

import atexit
import os
import platform
import pprint
import sys


# Provide saved history and tab completion on python symbols
# Shamelessly stolen from Python library manual
class Repl( code.InteractiveConsole ):
    def __init__( self, locals=None, histfile=None ):
        code.InteractiveConsole.__init__( self, locals )

        if histfile is None:
            histdir  = os.getenv( 'XDG_CACHE_HOME' ) or os.getenv( 'HOME' )
            histfile = os.path.join( histdir, ".pyrepl_history" )
        self.init_history( histfile )

    def init_history(self, histfile):
        readline.parse_and_bind( 'tab: complete')
        try:
            readline.read_history_file( histfile )
        except FileNotFoundError:
            pass
        atexit.register( self.save_history, histfile )

    def save_history( self, histfile ):
        readline.set_history_length( 1024 )
        readline.write_history_file( histfile )


repl_pp = pprint.PrettyPrinter( indent=2, width=60 )
def pp( *args, **kwargs ):
    for arg in args:
        repl_pp.pprint( arg, **kwargs )

def bt( *cmd ):
    output = subprocess.check_output( cmd ).decode( sys.stdout.encoding )
    return output.rstrip( ' \t\r\n' )

def load( filename ):
    with open( filename, 'r' ) as f:
        text = f.read()
    text.replace( '\r\n', '\n' )
    exec( text, globals(), repl_locals )

if __name__ == '__main__':
    banner = '{} {}.{}.{} [{}] {}-{}'.format(
        platform.python_implementation(),
        sys.version_info.major,
        sys.version_info.minor,
        sys.version_info.micro,
        platform.python_build()[1],
        sys.platform,
        platform.machine(), )

    # non-builtin symbols to be present at start in the repl.
    # having access to repl_pp lets us change _width on occasion
    repl_locals.update( { '__name__' : '__repl__',
                          'bt'       : bt,
                          'load'     : load,
                          'repl_pp'  : repl_pp, } )

    # Don't display 'None' if there is nothing to display.
    sys.displayhook = lambda arg: (arg is None) or pp( arg )
    repl = Repl( locals=repl_locals )
    try:
        repl.interact( banner=banner, exitmsg='' )
    except TypeError:
        repl.interact( banner=banner )  # python2.7

# pyrepl ends here
