#!/usr/bin/env perl
# rpm-pkg-list --- summarize installed rpm packages
# Author: Noah Friedman <friedman@splode.com>
# Created: 2004-11-29
# Public domain

# Commentary:
# Code:

use strict;
use warnings qw(all);

use POSIX;
use Symbol;
use Getopt::Long;
use Pod::Usage;

(my $progname = $0) =~ s=.*/==;

my %opt   = ( sortby       => [],
              reverse_sort => undef,
              header       => undef,
              fmtsize      => undef,
              show_total   => undef,
            );

my $total = 0;

# Meaning of fields:
#  * column  - column number in output.
#  * sort    - default sort precedence.
#  * numeric - sort column numerically rather than lexicographically.
#  * fmt     - pretty-print result; colummn width is computed based on this, but not necessarily sorting.
#  * prefmt  - filter result, before sorting occurs; result might be transformed again by fmt function.
#  * qf      - actual query format string for rpm -q command corresponding to field name.
my %field
  = ( size              => { column  => 0,
                             sort    => 1,
                             numeric => 1,
                             fmt     => \&fmtsize,
                           },
      name              => { column  => 1,
                             sort    => 0,
                             compare => \&cmp_hyphenated_fields,
                           },
      'version-release' => { column  => 2,
                             sort    => 2,
                             compare => \&cmp_version_release,
                           },
      arch              => { column  => 3,
                             sort    => 3,
                           },
      installtime       => { column  => 4,
                             sort    => 4,
                             numeric => 1,
                             fmt     => \&fmtdate,
                           },

      repository        => { column  => 5,
                             sort    => 5,
                             prefmt  => \&fmtrepo,
                             qf      => join( ":",
                                              '%|dsaheader?{%{dsaheader:pgpsig}}',
                                              '{%|rsaheader?{%{rsaheader:pgpsig}}',
                                              '{%|siggpg?{%{siggpg:pgpsig}}',
                                              '{%|sigpgp?{%{sigpgp:pgpsig}}',
                                              '{(none)}|}|}|}|',
                                            ),
                           },
    );

my %field_alias
  = ( date        => q(installtime),      time      => q(installtime),
      installdate => q(installtime),      installed => q(installtime),
      version     => q(version-release),  ver       => q(version-release),
      release     => q(version-release),  rel       => q(version-release),
      'package'   => q(name),             pkg       => q(name),
      repo        => q(repository),       depot     => q(repository),
    );

my $datefmt = $ENV{DATEFMT} || '%Y-%m-%d %H:%M:%S' ;

my %repo_fingerprint;

sub xopen
{
  my $file = $_[0];
  return unless -f $file;

  open( my $fh, $file );
  return $fh if $fh;

  print STDERR "open: $file: $!\n";
  return;
}

sub repo_fingerprint_init
{
  my $fh = @_ ? xopen( $_[0] ) : q(main::DATA);
  return unless $fh;

  while (<$fh>)
    {
      s/\s*#.*//;
      $repo_fingerprint{$1} = $2 if m/^\s*(\S+)\s+(\S+)/;
    }
  close ($fh);
}

sub fieldnames
{
  my $f = @_ ? { @_ } : \%field;
  sort { $f->{$a}->{column} <=> $f->{$b}->{column} } keys %$f;
}

sub fieldqf
{
  local $_ = shift;

  return $field{$_}->{qf}
    if exists $field{$_} && $field{$_}->{qf};

  s/([a-z0-9:]+)/%{$1}/gi;
  return $_;
}

sub fielderr
{
  print join( ": ", $progname, @_ ), "\n",
        "Valid field names are:\n\t",
        join( "\n\t", fieldnames() ), "\n";
  exit( 1 );
}

sub field_prefmt_list
{
  my $any = 0;

  my @prefmt = map { my $f = $field{$_}->{prefmt};
                     $any = 1 if $f;
                     $f;
                   } fieldnames();
  return unless $any;
  return @prefmt if wantarray;
  return \@prefmt;
}

sub capitalize
{
  join( "-", map { ucfirst $_ } split( /-/, $_[0] ));
}

sub fmtdate
{
  return "" if $_[0] eq "";
  strftime( $datefmt, localtime( $_[0] ));
}

sub fmtsize
{
  my $fmtsize = $opt{fmtsize};
  return $_[0] unless $fmtsize;

  my $size    = shift;
  my @suffix  = ('', qw(K M G T P E));

  while ($size > $fmtsize)
    {
      $size /= $fmtsize;
      shift @suffix;
    }

  my $fmtstr = $size < 100 && $suffix[0] ne '' ? "%.1f%s" : "%d%s" ;
  return sprintf( $fmtstr, $size, $suffix[0] );
}

sub fmtrepo
{
  local $_ = $_[0];
  s/.*Key ID.*(........)$/$1/;
  return $repo_fingerprint{$_} if exists $repo_fingerprint{$_};

  # do a more extensive search and memoize the result so we don't have to
  # search again for other packages with this same key.
  my $try = rpmsigkey( $_ );
  if ($try ne '')
    {
      $repo_fingerprint{$_} = $try;
      return $try;
    }
  $repo_fingerprint{$_} = $_;
}


sub rpmout
{
  my @cmd = ($ENV{RPMCMD} || 'rpm');
  push @cmd, ('--root',   $opt{root})   if $opt{root};
  push @cmd, ('--dbpath', $opt{dbpath}) if $opt{dbpath};
  push @cmd, (qw(--nodigest --nosignature));
  push @cmd, ("@_" =~ /\*/ ? '-qa' : '-q');
  push @cmd, @_;

  #print STDERR "$progname: @cmd\n";
  open( my $fh, "-|", @cmd ) or die "$_[0]: $!\n";
  local $/ = undef;
  local $_ = <$fh>;
  close( $fh );
  return $_;
}

sub rpmq
{
  my @qf = map { fieldqf( $_ ) } fieldnames();
  my $fmt = join( "\x1", @qf ) . "\n";

  local $_ = rpmout( '--qf', $fmt, @_ );
  s/^package .*? is not installed\n//gm;

  my @prefmt = field_prefmt_list();
  my @lines = map { my @f = split( /\x1/, $_ );
                    $total += $f[0];
                    if (@prefmt)
                      {
                        for (my $i = 0; $i < @f; $i++)
                          {
                            my $fn = $prefmt[$i];
                            $f[$i] = &$fn( $f[$i] ) if $fn;
                          }
                      }
                    \@f;
                  } split( /\n/, $_ );

  push @lines, [$total, "TOTAL", ("") x ((scalar keys %field) - 2)]
    if $opt{show_total};
  return \@lines;
}

sub rpmsigkey
{
  my $fmt = '%{summary}';
  local $_ = rpmout( '--qf', $fmt, '--whatprovides', "gpg($_[0])" );
  return "" if /no package provides/;
  s/gpg\(/(/;
  s/\).*/) $_[0]/;
  return $_;
}


# Break down a version string (x.y.z) into individual fields and compare
# each corresponding field.
# For corresponding fields that are both numeric, use `<=>'.
# If either or both are non-numeric, use `cmp'.
# Return [-1,0,1] for the overall comparison.
sub cmp_version
{
  my @a = split( /[.]/, $_[0] );
  my @b = split( /[.]/, $_[1] );
  my $j = (@a < @b ? @a : @b);
  for (my $i = 0; $i < $j; $i++)
    {
      my $cmp = ($a[$i] =~ /^\d+$/ && $b[$i] =~ /^\d+$/
                 ? $a[$i] <=> $b[$i]
                 : $a[$i] cmp $b[$i]);
      return $cmp if $cmp != 0;
    }
  # If all the components up to $j are identical, then the shorter array is
  # 'less' than the larger one.
  return -1 if @a  < @b;
  return  0 if @a == @b;
  return  1 if @a  > @b;
}

# Split string at hyphens and compare each field separately
# according to `cmp_version' (which see).
sub cmp_hyphenated_fields
{
  my $f = defined $_[2] ? $_[2] : 0 ;
  my @a = split( /[-]/, $_[0], $f );
  my @b = split( /[-]/, $_[1], $f );
  my $j = (@a < @b ? @a : @b);
  for (my $i = 0; $i < $j; $i++)
    {
      my $cmp = cmp_version( $a[$i], $b[$i] );
      return $cmp if $cmp != 0;
    }
  return -1 if @a  < @b;
  return  0 if @a == @b;
  return  1 if @a  > @b;
}

# version-release string should only have 2 fields.
sub cmp_version_release
{
  return cmp_hyphenated_fields( $_[0], $_[1], 2 );
}

sub sortlines
{
  my ($lines) = @_;
  my $sortby = $opt{sortby};

  my %f = %field;
  map { delete $f{$_} } @$sortby;

  my @field = (@$sortby, fieldnames( %f ));
  #print STDERR "sortby = ", join(" ", @field ), "\n";

  my @sorted = sort
    { my @keys = @field;
      my $res = 0;
      my ($x, $y) = $opt{reverse_sort} ? ($b, $a) : ($a, $b);
      while ($res == 0 && @keys)
        {
          my $key = shift @keys;
          my $i   = $field{$key}->{column};
          my $cmp = $field{$key}->{compare};
          if ($cmp)
            {
              $res = &$cmp( $x->[$i], $y->[$i] );
            }
          else
            {
              my $np = $field{$key}->{numeric};
              $res = ($np
                      ? $x->[$i] <=> $y->[$i]
                      : $x->[$i] cmp $y->[$i]);
            }
          last if $res;
        }
      $res;
    } @$lines;
  return \@sorted;
}

sub fmtlines
{
  my ($lines) = @_;
  my @fieldnames = fieldnames();
  my @fn = map { $field{$_}->{fmt} } @fieldnames;
  my @width = ($opt{header}
               ? map { length $_ } @fieldnames
               : (0) x @fn);

  map { for (my $i = 0; $i < @fn; $i++)
          {
            my $f = $fn[$i];
            $_->[$i] = &$f ($_->[$i]) if $f;
            $width[$i] = length $_->[$i]
              if length $_->[$i] > $width[$i];
          }
      } @$lines;
  return ($lines, \@width);
}

sub printlines
{
  my ($lines, $width) = @_;
  my @field = fieldnames();

  my $fmtstr = join( "  ",
                     map { my $w = $width->[$field{$_}->{column}];
                           sprintf( "%%%ds", ($field{$_}->{numeric}
                                              ?  $w
                                              : -$w) );
                         } @field ) . "\n";

  printf $fmtstr, map { capitalize( $_ ) } @field
    if $opt{header};
  map { printf $fmtstr, @$_ } @$lines;
}

sub parse_options
{
  local *ARGV = \@{$_[0]}; # modify our local arglist, not real ARGV.
  my $help = 0;
  my @sortby;

  my $parser = Getopt::Long::Parser->new;
  $parser->configure( qw(bundling autoabbrev) );
  my $succ = $parser->getoptions
    ( 'help'            => sub { $help = 3 },
      'usage'           => sub { $help = 1 },

      # Passed through to rpm
      "root=s"            =>      \$opt{root},
      "dbpath=s"          =>      \$opt{dbpath},

      "d|datefmt=s"       =>      \$opt{datefmt},
      "H|header"          =>      \$opt{header},
      "h|human-readable"  => sub { $opt{fmtsize} = 1024 },
      "si"                => sub { $opt{fmtsize} = 1000 },
      "r|reverse"         =>      \$opt{reverse_sort},
      "s|sort=s"          => sub { push @sortby, $_[1] },
      "t|total"           =>      \$opt{show_total},
    );

  pod2usage( -exitstatus => 1, -verbose => 0 )         unless $succ;
  pod2usage( -exitstatus => 0, -verbose => $help - 1 ) if $help > 0;

  @sortby = (qw(name version-release arch)) unless @sortby;
  @sortby = map { $field_alias{$_}
                    || (exists $field{$_} && $_)
                    || fielderr( $_, "Unrecognized field name" );
                } map { split( /[\s,]+/, $_ ) } @sortby;
  $opt{sortby} = \@sortby;

  @ARGV = ('*') unless @ARGV;
}

sub main
{
  ($progname = $0) =~ s=.*/==;
  parse_options( \@_ );

  my $rc = $ENV{RPMFINGERPRINTS} || "$ENV{HOME}/.rpm-fingerprints";
  repo_fingerprint_init();      # data section
  repo_fingerprint_init( $rc ); # user config

  printlines( fmtlines( sortlines( rpmq( @_ ))));
}

main( @ARGV );

__END__


=begin text

=encoding utf8

=end text

=head1 NAME

rpm-pkg-list - finish documenting me

=head1 SYNOPSIS

    {--help|--usage}          {-h|--human-readable}
                              {--si}
    {--root   ROOT}
    {--dbpath DBPATH}         {-s|--sort  FIELD}
                              {-r|--reverse}
    {-d|--datefmt FORMAT}
    {-H|--header}
    {-t|--total}

    [rpm package name patterns ...]

=cut


__DATA__

###############################################
### GPG key fingerprints for RPM signatures ###
###############################################

######
## Fedora
######

105ef944	fedora-42
e99d6ad1	fedora-41
a15b79cc	fedora-40
18b8e74c	fedora-39
eb10b464	fedora-38
5323552a	fedora-37
38ab71f4	fedora-36
9867c58f	fedora-35
45719a39	fedora-34
9570ff31	fedora-33
12c944d0	fedora-32
3c3359c4	fedora-31
cfc659b9	fedora-30
429476b4	fedora-29
9db62fb1	fedora-28
f5282ee4	fedora-27
64dab85d	fedora-26
bfb2d6e3	fedora-26-neverused
fdb19c98	fedora-25
81b46521	fedora-24
34ec9cba	fedora-23
8e1431d5	fedora-22
95a43f54	fedora-21
246110c1	fedora-20
fb4b18e6	fedora-19
de7f38bd	fedora-18
1aca3465	fedora-17
a82ba4b7	fedora-16
069c8460	fedora-15
97a1071f	fedora-14
e8e40fde	fedora-13
57bbccba	fedora-12
d22e77f2	fedora-11
4ebfc273	fedora-10
6df2196f	fedora-8/9	# only used for fedora 8/9 updates
df9b0ae9	fedora-8/9-test

# No secondary keys after Fedora 26
3b921d09	fedora-26-secondary
e372e838	fedora-25-secondary
030d5aed	fedora-24-secondary
873529b8	fedora-23-secondary
a29cb19c	fedora-22-secondary
a0a7badb	fedora-21-secondary
efe550f5	fedora-20-secondary
ba094068	fedora-19-secondary
a4d647e9	fedora-18-secondary
f8df67e6	fedora-17-secondary
10d90a9e	fedora-16-secondary
3ad31d0b	fedora-15-sparc
19be0bf9	fedora-14-secondary
fdb36b03	fedora-14-s390x
5bf71b5e	fedora-13-sparc
f613cbe8	fedora-9/10/11-ia64
00458545	fedora-9-sparc

a3cc4e62	fedora-modular
dbbdcf7c	fedora-iot-2019

# These fedora keys were discontinued as of 9/2008
4f2a6fd2	fedora-core
1ac70ce6	fedora-extras
30c9ecf8	fedora-test
1cddbca9	fedora-rawhide
731002fa	fedora-legacy

######
## Fedora EPEL
######

3228467c	epel-9
2f86d6a1	epel-8
352c64e5	epel-7
0608b895	epel-6
217521f6	epel-5			# also used for epel-4

######
## RPMfusion
######

d651ff2e	rpmfusion-free-2020	# Used for f33-f41 as of 2025-02-21
100bcd92	rpmfusion-free-f32
c481937a	rpmfusion-free-f31
c0aeda6e	rpmfusion-free-f30
42f19ed0	rpmfusion-free-f29
09eab3f2	rpmfusion-free-f28
7d838377	rpmfusion-free-f27
9690e4af	rpmfusion-free-f26
6806a9cb	rpmfusion-free-f25
b7546f06	rpmfusion-free-f24
e051b67e	rpmfusion-free-f23
97f4d1c1	rpmfusion-free-f22
6446d859	rpmfusion-free-f21
ae688223	rpmfusion-free-f20
172ff33d	rpmfusion-free-f19
982e0a7c	rpmfusion-free-f18
8296fa0f	rpmfusion-free-f17
adf25d9c	rpmfusion-free-f16
00a4d52b	rpmfusion-free-f15
865cc9ea	rpmfusion-free-f14
a3780952	rpmfusion-free-f13
16ca1a56	rpmfusion-free-f12
8fcff4da	rpmfusion-free-f11
49c8885a	rpmfusion-free-f10-or-earlier

94843c65	rpmfusion-nonfree-2020	# Used for f33-f41 as of 2025-02-21
6dc1be18	rpmfusion-nonfree-f32
54a86092	rpmfusion-nonfree-f31
1d14a795	rpmfusion-nonfree-f30
d6841af8	rpmfusion-nonfree-f29
7f858107	rpmfusion-nonfree-f28
b9c13282	rpmfusion-nonfree-f27
3276f4b3	rpmfusion-nonfree-f26
fa7a179a	rpmfusion-nonfree-f25
96ca6280	rpmfusion-nonfree-f24
5ca6c469	rpmfusion-nonfree-f23
a6708da3	rpmfusion-nonfree-f22
a668b376	rpmfusion-nonfree-f21
b5f29883	rpmfusion-nonfree-f20
cd30c86b	rpmfusion-nonfree-f19
e31b30ca	rpmfusion-nonfree-f18
d2382b83	rpmfusion-nonfree-f17
952f3af8	rpmfusion-nonfree-f16
6d0c8ec2	rpmfusion-nonfree-f15
f09d8368	rpmfusion-nonfree-f14
2425b284	rpmfusion-nonfree-f13
a3a882c1	rpmfusion-nonfree-f12
8dc43844	rpmfusion-nonfree-f11
b1981b68	rpmfusion-nonfree-f10-or-earlier

296458f3	rpmfusion-free-el9
158b3811	rpmfusion-free-el8
f5cf6c1e	rpmfusion-free-el7
849c449f	rpmfusion-free-el6
e74f0522	rpmfusion-free-el5

aab212ea	rpmfusion-nonfree-el9
bdda8475	rpmfusion-nonfree-el8
a3108f6c	rpmfusion-nonfree-el7
5568bbb2	rpmfusion-nonfree-el6
ab194290	rpmfusion-nonfree-el5

######
## CentOS
######

8483c65d	centos-8
f4a80eb5	centos-7
c105b9de	centos-6
e8562897	centos-5
443e1821	centos-4

fe837f6f	centos-security-6

# CentOS SoftwareCollections SIG (https://wiki.centos.org/SpecialInterestGroup/SCLo
f2ee9d55	centos-sc


######
## Red Hat
##
## See https://access.redhat.com/security/team/key
## for more details
######

fd431d51	redhat-release-2/2009		# 2009-10-22	RHEL{6,7,8,9}
37017186	redhat-release/2006-2009	# 2006-12-06	RHEL{5,6,7}
db42a60e	redhat-release/1999-2006	# 1999-09-23	RHEL{2.1,3,4,5,6,7}, RH6.2 and later
cba29bf9	redhat-linux/1996		# 1996-02-20	RH{4,5} pre-enterprise PGP key

# Disaster recovery keys, in case release keys were lost.
5a6340b3	redhat-aux-3/2022		# 2022-03-09	RHEL9
d4082792	redhat-aux-2/2018		# 2018-06-27	RHEL8
2fa658e0	redhat-aux-1/2006		# 2006-12-01	RHEL{5,6,7}

a5787476	redhat-devel/2014		# 2014-06-25

f21541eb	redhat-beta-2/2009		# 2009-02-24	RHEL{6,7,8,9}
897da07a	redhat-beta-1/2002		# 2002-03-15	RHEL{2.1,3,4,5,6,7}

e418e3aa	redhat-rawhide/2003		# 2003-08-20

1c711042	redhat-container-ready-1	# 2020-12-15
8a828aad	redhat-ansible-1		# 2022-04-11
55a34a82	redhat-isv-container		# 2019-08-30

8366b0d9	redhat-portal-tools		# 2015-02-16


# Secure Boot cert fingerprints (not gpg keys)

d3320449	redhat-IMA-Release-CA
f753959a	redhat-IMA-Release

2a2898c8	redhat-secureboot-CA-6
9c40ced9	redhat-secureboot-603
fe10bba7	redhat-secureboot-602
b7ee31e8	redhat-secureboot-601

769a9f8f	redhat-secureboot-CA-5
ae828a68	redhat-secureboot-504
6d56d92b	redhat-secureboot-503
127e985d	redhat-secureboot-502
47273e6d	redhat-secureboot-501

9c65f85c	redhat-secureboot-CA-3
3d1d83f5	redhat-secureboot-304
961f405a	redhat-secureboot-303
490da9e6	redhat-secureboot-302
5a887452	redhat-secureboot-301

######
## Rocky Linux
######

350d275d	rocky-release-2022

######
## SuSE
######

3dbdc284	opensuse

39db7c82	suse-sles-12.0
50a3dd1c	suse-sles-12.0-reserve

307e3d54	suse-sles-11.2
b37b98a9        suse-sles-11.2-ptf

9c800aca	suse
3d25d3d9	suse-security

######
## Misc
######

f14ab620	zfsonlinux.org
f6777c67	adobe
66534c2b	atrpms

2012ea22	1password
6b8d79e6	dag
621e9f35	docker-ce
1aa78495	dries
e42d547b	freshrpms
7fac5991	google
ff6382fa	kde-redhat
a109b1ec	livna
22b2951d	mhensler-suspend2
be1229cf	microsoft
f90c0e97	negativo17
98ab5139	oracle-virtualbox
ebff1218	packagecloud.io		# 2018-12-10 ops production key
a9464aa9	pidgin
68d9802a	planetccrma		# nando@ccrma.stanford.edu
92563518	ringcentral
61a7c71d	zoom.us

f661cdcb	brave-pre-release
20038257	brave-release
6a8a26f9	brave-nightly
c2d4e821	brave-c2d4e821
82d3dc6c	brave-82d3dc6c

bf6a7041	slack-2017		# 2017-10-05 4.1.1 or earlier
8e6c9578	slack-4.1.2		#            4.1.2 or above
7eb66c16	slack-2022		# 2022-07-08 4.33 or earlier
dde0f7a1	slack-2023		# 2023-07-07 4.34 or above

ba392878	splode-internal-2005	# internal reference key; not secure
dbcccc4b	splode-internal-2015	# internal reference key; not secure

598252fb	rockowitz@build.opensuse.org

66fd4949	vmware-linux-packages	# 2008-04-15

(none)  	(unsigned)		# unsigned so dont know what repo it came from

# eof
