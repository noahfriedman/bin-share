#!/usr/local/bin/bash
# mkdirhier, make subdirectory, creating missing parent directories as well.
# 10-Jan-92 Noah Friedman <friedman@prep.ai.mit.edu>
# Last modified 18-Oct-92
#
# Requires bash 1.12 or later to work properly.
#
# Public domain.
#

function usage ()
{
    if [ $# -gt 0 ]; then
       echo -e "${progname}: $*\n" 1>&2
    fi

    cat 1>&2 <<EOF
Usage: ${progname} {-D|--debug} [dir1] {dir2} {...}
EOF

   exit 1
}

function main ()
{
 local exit_stat=0
 local pathname

    progname=${0##*/}   # equivalent to "basename $0"

    initialize_variables "$@"
    parse_command_args "$@"
    shift $?

    test -n "${debug+set}" && set -x

    test $# -eq 0 && usage

    for dir in "$@" ; do
       # Check first character of each pathname.  If it's a `-', prepend
       # "./" to the path so that mkdir won't be confused.  (some versions
       # of mkdir might have a `--' option which stops processing
       # arguments, but we're being pessimistic.)
       first_char=$(echo "${dir}" | sed "s/^\(.\).*$/\1/")
       case z${first_char} in
          z- )
             dir="./${dir}"
           ;;
          * )
             :
           ;;
       esac  

       do_mkdirhier "${dir}"
       if [ $? -ne 0 ]; then
          exit_stat=1
       fi
    done

    exit ${exit_stat}
}

function initialize_variables ()
{
    bq="\`"  # To prevent hairy quoting and escaping later.
    eq="'"
}

function parse_command_args ()
{
 local orig_number_options=$#

    # unset option variables to make sure they weren't accidentally
    # exported 
    unset debug

    while [ $# -gt 0 ]; do
       case z$1 in
          z-D | z--debug | z--d* )
             debug=t
             shift
            ;;
          z-h* | z--help | z--h* )
             usage
            ;;
          z-- )
             shift
             break
            ;;
          z-* )
             usage "${bq}${1}${eq} is not a valid option."
            ;;
          * )
             break
            ;;
       esac
    done

    # Return number of shifted arguments so calling function can shift
    # appropriate amount.
    return $[ orig_number_options - $# ]
}

# Note that this function doesn't have to do much error checking.
# Basically, if a pathname component isn't a directory, or if it is but we
# can't access it to make new directories beneath it, it is `mkdir' that
# will do most of the dirty work.
function do_mkdirhier ()
{ 
 local new_dir="$1"
 local parent_dir=$(dirname ${new_dir})
 local exit_status=0

    # Recursively check existence of directories, creating them if
    # necessary.  If any at point this function returns non-zero, abort the
    # entire process
    if [ ! -d "${parent_dir}" -a "${parent_dir}" != "${new_dir}" ]; then
       if ! do_mkdirhier "${parent_dir}" ; then
          return 1
       fi
    fi

    # All seems to be well.  Make this directory. 
    mkdir "${new_dir}"

    return $?
}

function dirname ()
{
 local dir="$1"
 local tdir="${dir%/}"

    # Strip trailing '/' characters from dir (unusual that this should
    # ever occur, but dirname(1) seems to deal with it.)
    while [ "${tdir}" != "${dir}" ]; do
       tdir="${dir}"
       dir="${tdir%/}"
    done

    dir="${dir%/*}"
    echo "${dir:-/}"
}

main "$@"

# eof
