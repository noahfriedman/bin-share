#!/bin/sh
exec ${PERL-perl} -wSx $0 ${1+"$@"}
#!perl

# mdf --- df wrapper to align columns for legibility

# Author: Noah Friedman <friedman@splode.com>
# Created: 2001-01-11
# Public domain.

# $Id: mdf,v 1.5 2001/01/21 02:56:14 friedman Exp $

# Commentary:
# Code:

use POSIX qw(uname);
use strict;

my $domain = dnsdomain ();

my $fieldsep = "[ \t]+";
my %right_justify = ( 1 => 1, 2 => 1, 3 => 1, 4 => 1);
my $width_limit;  # not currently used
my $widthpad = 1; # extra padding to add between columns

sub dnsdomain
{
  my @uname = uname ();
  my $nodename = $uname[1];

  unless ($nodename =~ /\./o)
    {
      use Socket;
      my $addr = gethostbyname ($nodename);
      $nodename = gethostbyaddr ($addr, AF_INET);
    }
  return undef unless ($nodename =~ /\./o);

  $nodename =~ s/^[^.]+\.//o;
  return $nodename;
}

sub parse_input ($$)
{
  my $lines = shift;
  my $fieldsep = shift;
  my @parsedlines;
  my @maxwidth;

  my $line;
  foreach $line (@$lines)
    {
      my @fields = split (/$fieldsep/o, $line, -1);
      push @parsedlines, \@fields;

      my $i = 0;
      my $f;
      foreach $f (@fields)
        {
          my $l = length $f;
          $maxwidth[$i] = $l
            if (!defined $maxwidth[$i] || $l > $maxwidth[$i]);
          $i++;
        }
    }
  return \@parsedlines, \@maxwidth;
}

sub print_output ($$)
{
  my ($lines, $maxwidth) = @_;

  my @fmts;
  my $i = 0;
  my $width;
  foreach $width (@$maxwidth)
    {
      my $w = (defined $width_limit ? min ($width, $width_limit) : $width);
      push @fmts, join ("",
                        $i == 0 ? "" : " " x $widthpad,
                        (exists $right_justify{$i} ? "%" : "%-"),
                        $w,
                        (defined $width_limit ? "." . ($w-1) : ""),
                        "s");
      $i++;
    }
  $fmts[$#fmts] = "%s" if (substr ($fmts[$#fmts], 1, 1) eq '-');
  my $fmtstr = join (" ", @fmts);

  my $l;
  foreach $l (@$lines)
    {
      my $s = sprintf ($fmtstr, @$l);
      $s =~ s/\s+$//o;
      print $s, "\n";
    }
}

sub main ()
{
  my $dfcmd = exists $ENV{DF} ? $ENV{DF} : 'df';
  push @ARGV, "-k" unless (scalar @ARGV > 0);
  my $dfout = qx{ $dfcmd @ARGV };

  my ($header, $rest) = split (/\n/o, $dfout, 2);
  $header =~ s/mounted on/Mountpoint/io;
  $header =~ s/available/Avail/io;
  $header =~ s/capacity/Use%/io;

  $rest =~ s/\n\s+/ /go;
  $rest =~ s=\.$domain:/=:/=go if (defined $domain);

  my ($lines, $maxwidth) = parse_input ([$header, split (/\n/o, $rest)],
                                        $fieldsep);
  $header = shift @$lines;
  $lines = [sort { $a->[5] cmp $b->[5] } @$lines];
  unshift @$lines, $header;
  print_output ($lines, $maxwidth);
}

main ();

# local variables:
# mode: perl
# eval: (auto-fill-mode 1)
# end:

# mdf ends here
