#! /bin/sh
# pstogif --- convert PostScript images to GIF
# Author: Noah Friedman <friedman@prep.ai.mit.edu>
# Created: 1994-10-17
# Public domain.

# $Id: pstogif,v 1.2 1995/02/10 19:58:38 friedman Rel friedman $

# Commentary:

# This program uses Ghostscript to convert postscript files to gif format.
# If ghostscript was not installed with support for writing gif-format
# files directly, other intermediary formats can be used instead, such as
# ppm, pgm, pbm, etc.  In that case, the `pbmplus' or `netpbm' utilities
# need to be in your path so this program can access them.

# Code:

# This string is expanded by RCS automatically when this file is checked out.
rcs_revision='$Revision: 1.2 $'

# Name by which this script was invoked.
progname=`echo "$0" | sed -e 's/[^\/]*\///g'`

# To prevent hairy quoting and escaping later.
bq='`'
eq="'"

# normal font resolution in dots per inch
defres=72
xres=$defres
yres=$defres

# Magnification step
xmag=1
ymag=1

format=gif8

revision=`set fnord $rcs_revision; echo $3`

usage="Usage: $progname {options} file1.ps {file2.ps {...}}
(Version $revision)

Options are:
-D, --debug                  Turn on shell debugging ($bq${bq}set -x$eq$eq).
                             Implies --verbose.
-f, --force                  Overwrite existing .gif or other intermediary
                             format files without notification.  By
                             default, this program refuses to overwrite any
                             existing files.
-h, --help                   You're looking at it.
-i, --intermediary-format    Specify FMT as the ${bq}device$eq (i.e. output
                      FMT    format) for Ghostscript.  Currently recognized
                             formats include: gif8 gifmono ppm ppmraw
                             The default is $bq$format$eq.
-m, --magnify         STEP   Magnify x and y sizes by a factor of STEP.
                             Default is xmag=$xmag, ymag=$ymag
-q, --quiet                  Do not report progress during conversion.
-r, --resolution      RES    Input image resolution for both x and y
                             coordinates, in dots per inch.  You probably
                             never need to adjust this.
                             Default is xres=$xres, yres=$yres
-V, --version                Show version number of this program & exit.
-v, --verbose                Report progress.  This is the default.
-X, --x-resolution    XRES   Like $bq--resolution$eq, but only change x value.
-x, --x-magnification XSTEP  Like $bq--magnify$eq, but only change x factor.
-Y, --y-resolution    YRES   Like $bq--resolution$eq, but only change y value.
-y, --y-magnification YSTEP  Like $bq--magnify$eq, but only change y factor.
"

# Usage: eval "$getopt"; value=$optarg
# or     optarg_optional=t; eval "$getopt"; value=$optarg
#
# This function automatically shifts the positional args as appropriate.
# The argument to an option is optional if the variable `optarg_optional'
# is non-empty.  Otherwise, the argument is required and getopt will cause
# the program to exit on an error.  optarg_optional is reset to be empty
# after every call to getopt.  The argument (if any) is stored in the
# variable `optarg'.
#
# Long option syntax is `--foo=bar' or `--foo bar'.  2nd argument
# won't get used if first long option syntax was used.
#
# Note: because of broken bourne shells, using --foo=bar syntax can
# actually screw the quoting of args that end with trailing newlines.
# Specifically, most shells strip trailing newlines from substituted
# output, regardless of quoting.
getopt='
  {
    optarg=
    case "$1" in
      --*=* )
        optarg=`echo "$1" | sed -e "1s/^[^=]*=//"`
        shift
       ;;
      * )
        case ${2+set} in
          set )
            optarg="$2"
            shift
            shift
           ;;
          * )
            case "$optarg_optional" in
              "" )
                case "$1" in
                  --*=* ) option=`echo "$1" | sed -e "1s/=.*//;q"` ;;
                  * ) option="$1" ;;
                esac
                exec 1>&2
                echo "$progname: option $bq$option$eq requires argument."
                echo "$progname: use $bq--help$eq to list option syntax."
                exit 1
               ;;
           esac
         ;;
        esac
     ;;
    esac
    optarg_optional=
  }'

# Initialize variables.
# Don't use `unset' since old bourne shells don't have this command.
# Instead, assign them an empty value.
debug=
force=
verbose=t
gs_quiet=

# Parse command line arguments.
# Make sure that all wildcarded options are long enough to be unambiguous.
# It's a good idea to document the full long option name in each case.
# Long options which take arguments will need a `*' appended to the
# canonical name to match the value appended after the `=' character.
while : ; do
  case $# in 0) break ;; esac
  case "$1" in
    -D | --debug | --d* )
      debug=t
      verbose=t
      gs_quiet=
      shift
     ;;
    -f | --force | --f* )
      force=t
      shift
     ;;
    -h | --help | --h )
      echo "$usage" 1>&2
      exit 0
     ;;
    -i | --intermediary-format* | --i* )
      eval "$getopt"
      format="$optarg"
     ;;
    -m | --magnification* | --magnify* | --magstep* | --m* )
      eval "$getopt"
      xmag="$optarg"
      ymag="$optarg"
     ;;
    -q | --quiet | --q* )
      verbose=
      gs_quiet=-q
      shift
     ;;
    -r | --resolution* | --re* )
      eval "$getopt"
      xres="$optarg"
      yres="$optarg"
     ;;
    -V | --version | --vers* )
      echo "$progname version $revision"
      exit 0
     ;;
    -v | --verbose | --verb* )
      verbose=t
      gs_quiet=
      shift
     ;;
    -X | --x-resolution* | --x-r* )
      eval "$getopt"
      xres="$optarg"
     ;;
    -Y | --y-resolution* | --y-r* )
      eval "$getopt"
      yres="$optarg"
     ;;
    -x | --x-magnification* | --x-magnify* | --x-magstep* | --x-m* )
      eval "$getopt"
      xmag="$optarg"
     ;;
    -y | --y-magnification* | --y-magnify* | --y-magstep* | --y-m* )
      eval "$getopt"
      ymag="$optarg"
     ;;
    -- )     # Stop option processing
      shift
      break
     ;;
    -? | --* )
      case "$1" in
        --*=* ) arg=`echo "$1" | sed -e 's/=.*//'` ;;
        * )     arg="$1" ;;
      esac
      exec 1>&2
      echo "$progname: unknown or ambiguous option $bq$arg$eq"
      echo "$progname: Use $bq--help$eq for a list of options."
      exit 1
     ;;
    -??* )
      # Split grouped single options into separate args and try again
      optarg="$1"
      shift
      set fnord `echo "x$optarg" | sed -e 's/^x-//;s/\(.\)/-\1 /g'` ${1+"$@"}
      shift
     ;;
    * )
      break
     ;;
  esac
done

case "$debug" in t ) set -x ;; esac
case "$verbose" in '' ) exec 1> /dev/null ;; esac

bcinit='scale=4
'

case "$format" in
  gif8 | gifmono | ppm | ppmraw ) : ;;
  * )
    echo "$progname: unknown intermediary format $bq$format$eq." 1>&2
    exit 1
   ;;
esac

file_exists_hint_given_p=

for file in ${1+"$@"}; do
  basename=`echo "$file" \
             | sed -e 's/\/*$//
                       s/.*\///
                       s/\..*//'`

  case "$force" in
    t ) : ;;
    * )
      set fnord `ls -1d "$basename"*".$format" "$basename.gif" 2> /dev/null`
      shift
      case $# in
        0 ) : ;;
        * )
          echo "$progname: skipping conversion of $bq$file$eq" 1>&2

          case "$file_exists_hint_given_p" in
            t ) : ;;
            * )
              file_exists_hint_given_p=t
              sed -e "s/^/$progname: /" 1>&2 <<__EOF__
The following files in the current directory might get overwritten
as a result of running this program.  If desired, rename or remove
them, or just use the $bq-f$eq ($bq--force$eq) option.
__EOF__
             ;;
          esac

          echo
          ls -lsd "$basename"*".$format" "$basename.gif" 2> /dev/null
          echo
          continue
         ;;
      esac
     ;;
  esac

  echo "$progname: converting $file"

  # Get the bounding box coordinates.
  # If the first bounding box instructions say "(atend)", then search to
  # the end of the file for the last occurrence of a bounding box.
  set fnord `sed -ne '
               /^%%BoundingBox:/{
                 /(atend)/!{
                   p
                   q
                 }
                 b l
               }
               d
               :l
               /^%%BoundingBox:/h
               $b e
               n
               b l
               :e
               x
               p
               q
             ' "$file"`

  case $# in
    1 )
      echo "$progname: warning: no BoundingBox found in $bq$arg$eq" 1>&2
      # Guess.  Assume image area fits in a 8.5x11 sheet.
      llx=0
      lly=0
      urx=`echo "$bcinit ($xres * 8.5)" | bc`
      ury=`echo "$bcinit ($yres * 11)"  | bc`
      echo "$progname: warning: guessing %%BoundingBox $llx $lly $urx $ury" 1>&2
     ;;
    * )
      # Args hopefully now: fnord %%BoundingBox llx lly urx ury
      llx=$3; urx=$5
      lly=$4; ury=$6
     ;;
  esac
  shift $#

  xsize=`echo "$bcinit ($urx - $llx) * $xmag" \
          | bc \
          | sed -e 's/\..*//'`
  ysize=`echo "$bcinit ($ury - $lly) * $ymag" \
          | bc \
          | sed -e 's/\..*//'`

  xres=`echo "$bcinit ($xres * $xmag)" | bc`
  yres=`echo "$bcinit ($yres * $ymag)" | bc`

  echo $progname: gs -sDEVICE=${format} \
                     -sOutputFile="$basename%03d.$format" \
                     -g${xsize}x${ysize} \
                     -r${xres}x${yres} \
                     $gs_quiet "$file"

  echo "$llx neg $lly neg translate" \
   | gs -sDEVICE=${format} \
        -sOutputFile="$basename%03d.$format" \
        -g${xsize}x${ysize} \
        -r${xres}x${yres} \
        $gs_quiet - "$file"

  set fnord `ls -1d "$basename"*".$format" 2> /dev/null`
  shift

  case $# in
    0 )
      echo "$progname: No $basename.$format files were created!" 1>&2
      continue
     ;;
    1 )
      newname=`echo "$1" | sed -e "s/001\.$format\$/.$format/"`
      mv "$1" "$newname"
      set fnord "$newname"
      shift
     ;;
  esac

  case "$format" in
    gif* )
      for f in ${1+"$@"}; do
       gif=`echo "$f" | sed -e "s/\.$format\$/.gif/"`
       mv "$f" "$gif" \
        && echo "$progname: created $gif"
      done
     ;;
    ppm* )
      for f in ${1+"$@"}; do
       gif=`echo "$f" | sed -e "s/\.$format\$/.gif/"`
       echo "$progname: running ppmtogif on $bq$f$eq"
       ppmtogif "$f" > "$gif" \
        && rm -f "$f" \
        && echo "$progname: created $gif"
      done
     ;;
  esac
done

# pstogif ends here
